services:
  app-api:
    container_name: app-api
    image: local/appapi
    build:
      context: .
      dockerfile: App.Api/Dockerfile
    environment:
      - ASPNETCORE_ENVIRONMENT=Development
      - ASPNETCORE_HTTP_PORTS=8080
      - ASPNETCORE_HTTPS_PORTS=8081
      - ConnectionStrings__SqlServer=Server=sql-server;Database=SefimSuperAdmin;User Id=sa;Password=StrongPassword123!;TrustServerCertificate=True;
    ports:
      - "5190:8080"
      - "7190:8081"
    networks:
      - app-network
    volumes:
      - ${APPDATA}/Microsoft/UserSecrets:/home/app/.microsoft/usersecrets:ro
      - ${APPDATA}/Microsoft/UserSecrets:/root/.microsoft/usersecrets:ro
      - ${APPDATA}/ASP.NET/Https:/home/app/.aspnet/https:ro
      - ${APPDATA}/ASP.NET/Https:/root/.aspnet/https:ro
    depends_on:
      - sql-server
      - seq
  app-ui:
    image: local/appui
    container_name: app-ui
    build:
      context: .
      dockerfile: App.UI/Dockerfile
    environment:
      - ASPNETCORE_ENVIRONMENT=Development
      - ASPNETCORE_HTTP_PORTS=8080
      - ASPNETCORE_HTTPS_PORTS=8081
      - DOTNET_RUNNING_IN_CONTAINER=true
      - API_BASE_URL=http://app-api:8080/
    ports:
      - "5191:8080"
      - "7191:8081"
    networks:
      - app-network
    volumes:
      - ${APPDATA}/Microsoft/UserSecrets:/home/app/.microsoft/usersecrets:ro
      - ${APPDATA}/Microsoft/UserSecrets:/root/.microsoft/usersecrets:ro
      - ${APPDATA}/ASP.NET/Https:/home/app/.aspnet/https:ro
      - ${APPDATA}/ASP.NET/Https:/root/.aspnet/https:ro
    depends_on:
      - app-api
      - seq
  sql-server:
    image: mcr.microsoft.com/mssql/server:2019-latest
    container_name: app-db
    environment:
      - ACCEPT_EULA=Y
      - SA_PASSWORD=StrongPassword123!
    ports:
      - "1433:1433"
    volumes:
      - sql-data:/var/opt/mssql
    networks:
      - app-network

  rabbitmq:
    image: "rabbitmq:3-management"
    container_name: app-rabbitmq
    ports:
      - "5672:5672"  
      - "15672:15672"  
    environment:
      RABBITMQ_DEFAULT_USER: ${RABBITMQ_USERNAME}
      RABBITMQ_DEFAULT_PASS: ${RABBITMQ_PASSWORD}
    volumes:
      - rabbitmq-data:/var/lib/rabbitmq 
    networks:
      - app-network

  app-worker:
    image: local/appworker
    container_name: app-worker
    build:
      context: .
      dockerfile: App.Worker/Dockerfile
    environment:
      - RabbitMQ__HostName=rabbitmq
      - RabbitMQ__UserName=${RABBITMQ_USERNAME}
      - RabbitMQ__Password=${RABBITMQ_PASSWORD}
    networks:
      - app-network
    depends_on:
      - rabbitmq
      - seq

  seq:
    image: datalust/seq:latest
    container_name: app-seq
    ports:
      - "5341:80"
    environment:
      - ACCEPT_EULA=Y
      - SEQ_FIRSTRUN_ADMINUSERNAME=${SEQ_CONTAINER_ADMIN_USER}
      - SEQ_FIRSTRUN_ADMINPASSWORD=${SEQ_CONTAINER_ADMIN_PASSWORD}
    volumes:
      - seq-data:/data
    networks:
      - app-network
  
  cloudflared:
    container_name: app-cloudflared
    image: cloudflare/cloudflared:latest
    command: tunnel run
    environment:
      - TUNNEL_TOKEN=eyJhIjoiYmUwNmU1ZDM3ODY1MTkwOGJiNGYzYjQ0YWU5ZjkwMGYiLCJ0IjoiYjc3NWVhM2UtYTE1ZS00MTNmLTg3NDQtMTYxZDdkMjNmN2VjIiwicyI6IlpUWTJaV0k1WlRndE56RmlaaTAwWXpsbUxUZzFNbUV0WlRnek0yVXdNV1EwTm1WaSJ9
    networks:
      - app-network
    restart: unless-stopped
    depends_on:
      - app-ui
    volumes:
      - ./.cloudflared:/etc/cloudflared



volumes:
  sql-data:
  rabbitmq-data:
  seq-data:

networks:
  app-network:
    name: app-network 
    driver: bridge