@model List<ExternalUserListDto>

@{
    ViewData["Title"] = "External Kullanıcı Yönetimi";
    var selectedMachine = ViewData["SelectedMachine"] as SelectedMachineInfo;
}

<!-- ViewComponent Navigation -->
@await Component.InvokeAsync("RoleBasedNavigation", new { showLogo = true })

<div class="container-fluid">
    <div class="row mb-4">
        <div class="col-12">
            <div class="d-flex justify-content-between align-items-center">
                <div>
                    <h2><i class="fas fa-users-cog text-primary"></i> External Kullanıcı Yönetimi</h2>
                    <p class="text-muted">
                        @if (selectedMachine != null)
                        {
                            <text>@selectedMachine.BranchName makinesindeki kullanıcıları yönetin</text>
                        }
                        else
                        {
                            <text>External API kullanıcılarını yönetin</text>
                        }
                    </p>
                </div>
                <div>
                    <a href="/Home/Index" class="btn btn-secondary">
                        <i class="fas fa-arrow-left"></i> Makine Seçimine Dön
                    </a>
                </div>
            </div>
        </div>
    </div>

    <div class="row">
        <div class="col-12">
            <div class="card shadow">
                <div class="card-header bg-success text-white">
                    <div class="d-flex justify-content-between align-items-center">
                        <h6 class="m-0 font-weight-bold">
                            <i class="fas fa-list"></i> External Kullanıcı Listesi (@Model.Count kullanıcı)
                        </h6>
                        <div>
                            <button onclick="showAddExternalUserModal()" class="btn btn-sm btn-light me-2">
                                <i class="fas fa-plus"></i> Ekle
                            </button>
                            <button onclick="refreshExternalUserList()" class="btn btn-sm btn-outline-light">
                                <i class="fas fa-sync-alt"></i> Yenile
                            </button>
                        </div>
                    </div>
                </div>
                <div class="card-body">
                    @if (Model.Any())
                    {
                        <div class="table-responsive">
                            <table class="table table-bordered table-hover" id="externalUsersTable">
                                <thead class="thead-dark">
                                    <tr>
                                        <th><i class="fas fa-user"></i> Kullanıcı Adı</th>
                                        <th><i class="fas fa-envelope"></i> Email</th>
                                        <th><i class="fas fa-user-tag"></i> Ad Soyad</th>
                                        <th><i class="fas fa-building"></i> Şube Adı</th>
                                        <th><i class="fas fa-cog"></i> İşlemler</th>
                                    </tr>
                                </thead>
                                <tbody>
                                    @foreach (var user in Model)
                                    {
                                        <tr>
                                            <td class="align-middle">
                                                <strong>@user.UserName</strong>
                                                <br><small class="text-muted">ID: @user.Id</small>
                                            </td>
                                            <td class="align-middle">@user.Email</td>
                                            <td class="align-middle">@user.FullName</td>
                                            <td class="align-middle">@user.BranchName</td>
                                            <td class="align-middle">
                                                <button class="btn btn-sm btn-primary" onclick="editUser('@user.Id')">
                                                    <i class="fas fa-edit"></i> Düzenle
                                                </button>
                                                <button class="btn btn-sm btn-danger" onclick="deleteUser('@user.Id', '@user.UserName')">
                                                    <i class="fas fa-trash"></i> Sil
                                                </button>
                                            </td>
                                        </tr>
                                    }
                                </tbody>
                            </table>
                        </div>
                    }
                    else
                    {
                        <div class="text-center py-5">
                            <i class="fas fa-users fa-3x text-muted mb-3"></i>
                            <h4 class="text-muted">Kullanıcı bulunamadı</h4>
                            <p class="text-muted">Henüz hiç kullanıcı kaydı yapılmamış.</p>
                        </div>
                    }
                </div>
            </div>
        </div>
    </div>
</div>

<!-- External Kullanıcı Ekleme Modal -->
<div class="modal fade" id="addExternalUserModal" tabindex="-1" aria-hidden="true">
    <div class="modal-dialog modal-lg">
        <div class="modal-content">
            <div class="modal-header bg-success text-white">
                <h5 class="modal-title">
                    <i class="fas fa-user-plus"></i> Yeni External Kullanıcı Ekle
                </h5>
                <button type="button" class="btn-close btn-close-white" data-bs-dismiss="modal"></button>
            </div>
            <form id="addExternalUserForm">
                <div class="modal-body">

                    <div class="alert alert-danger alert-dismissible fade show d-none" id="modalValidationError" role="alert">
                        <i class="fas fa-exclamation-circle me-2"></i>
                        <span id="modalErrorMessage"></span>
                        <button type="button" class="btn-close" data-bs-dismiss="alert" aria-label="Close"></button>
                    </div>

                    <div class="alert alert-info">
                        <i class="fas fa-info-circle"></i>
                        External makineye kullanıcı eklenecektir. Zorunlu alanları doldurun.
                    </div>

                    <div class="row">
                        <div class="col-md-6">
                            <div class="mb-3">
                                <label for="external-admin-userName" class="form-label">
                                    <i class="fas fa-user"></i> Kullanıcı Adı *
                                </label>
                                <input type="text" class="form-control" id="external-admin-userName" name="userName" required autocomplete="off">
                                <div class="invalid-feedback"></div>
                            </div>
                        </div>
                        <div class="col-md-6">
                            <div class="mb-3">
                                <label for="external-admin-email" class="form-label">
                                    <i class="fas fa-envelope"></i> Email *
                                </label>
                                <input type="email" class="form-control" id="external-admin-email" name="email" required autocomplete="off">
                                <div class="invalid-feedback"></div>
                            </div>
                        </div>
                    </div>

                    <div class="row">
                        <div class="col-md-6">
                            <div class="mb-3">
                                <label for="external-admin-firstName" class="form-label">
                                    <i class="fas fa-user-tag"></i> Ad *
                                </label>
                                <input type="text" class="form-control" id="external-admin-firstName" name="firstName" required>
                                <div class="invalid-feedback"></div>
                                <div class="form-text">En az 2 karakter olmalıdır.</div>
                            </div>
                        </div>
                        <div class="col-md-6">
                            <div class="mb-3">
                                <label for="external-admin-lastName" class="form-label">
                                    <i class="fas fa-user-tag"></i> Soyad *
                                </label>
                                <input type="text" class="form-control" id="external-admin-lastName" name="lastName" required>
                                <div class="invalid-feedback"></div>
                                <div class="form-text">En az 2 karakter olmalıdır.</div>
                            </div>
                        </div>
                    </div>

                    <div class="row">
                        <div class="col-md-4">
                            <div class="mb-3">
                                <label for="external-admin-phoneNumber" class="form-label">
                                    <i class="fas fa-phone"></i> Telefon Numarası *
                                </label>
                                <input type="tel" class="form-control" id="external-admin-phoneNumber" name="phoneNumber" required placeholder="0532XXXXXXX">
                                <div class="invalid-feedback"></div>
                                <div class="form-text">Örnek: 0532XXXXXXX</div>
                            </div>
                        </div>
                        <div class="col-md-4">
                            <div class="mb-3">
                                <label for="external-admin-code" class="form-label">
                                    <i class="fas fa-code"></i> Kod *
                                </label>
                                <input type="text" class="form-control" id="external-admin-code" name="code" required placeholder="ABC123" maxlength="20">
                                <div class="invalid-feedback"></div>
                                <div class="form-text">2-20 karakter, büyük harf ve rakam</div>
                            </div>
                        </div>
                        <div class="col-md-4">
                            <div class="mb-3">
                                <label for="external-admin-userLoginType" class="form-label">
                                    <i class="fas fa-user-cog"></i> Kullanıcı Tipi *
                                </label>
                                <select class="form-control" id="external-admin-userLoginType" name="userLoginType" required>
                                    <option value="">Seçiniz...</option>
                                    <option value="1">Personal</option>
                                    <option value="2" selected>Shared</option>
                                    <option value="3">Service</option>
                                </select>
                                <div class="invalid-feedback"></div>
                                <div class="form-text">Varsayılan: Shared</div>
                            </div>
                        </div>
                    </div>

                    <div class="row">
                        <div class="col-md-6">
                            <div class="mb-3">
                                <label for="external-admin-password" class="form-label">
                                    <i class="fas fa-lock"></i> Şifre *
                                </label>
                                <div class="input-group">
                                    <input type="password" class="form-control" id="external-admin-password" name="password" required autocomplete="new-password">
                                    <button class="btn btn-outline-secondary" type="button" onclick="togglePassword('external-admin-password', this)">
                                        <i class="fas fa-eye"></i>
                                    </button>
                                </div>
                                <div class="invalid-feedback"></div>
                                <div class="form-text"><strong>En az 6 karakter olmalıdır.</strong></div>
                            </div>
                        </div>
                        <div class="col-md-6">
                            <div class="mb-3">
                                <label for="external-admin-confirmPassword" class="form-label">
                                    <i class="fas fa-lock"></i> Şifre Tekrar *
                                </label>
                                <div class="input-group">
                                    <input type="password" class="form-control" id="external-admin-confirmPassword" name="confirmPassword" required autocomplete="new-password">
                                    <button class="btn btn-outline-secondary" type="button" onclick="togglePassword('external-admin-confirmPassword', this)">
                                        <i class="fas fa-eye"></i>
                                    </button>
                                </div>
                                <div class="invalid-feedback"></div>
                                <div class="valid-feedback">Şifreler eşleşiyor!</div>
                            </div>
                        </div>
                    </div>
                </div>

                <div class="modal-footer">
                    <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">
                        <i class="fas fa-times"></i> İptal
                    </button>
                    <button type="submit" class="btn btn-success">
                        <i class="fas fa-save"></i> External Kullanıcı Ekle
                    </button>
                </div>
            </form>
        </div>
    </div>
</div>

<!-- External Kullanıcı Düzenleme Modal -->
<div class="modal fade" id="editExternalUserModal" tabindex="-1" aria-hidden="true">
    <div class="modal-dialog modal-lg">
        <div class="modal-content">
            <div class="modal-header bg-warning text-dark">
                <h5 class="modal-title">
                    <i class="fas fa-user-edit"></i> External Kullanıcı Düzenle
                </h5>
                <button type="button" class="btn-close" data-bs-dismiss="modal"></button>
            </div>
            <form id="editExternalUserForm">
                <div class="modal-body">
                    <!-- Edit Modal için Hata Mesajı -->
                    <div class="alert alert-danger alert-dismissible fade show d-none" id="editModalValidationError" role="alert">
                        <i class="fas fa-exclamation-circle me-2"></i>
                        <span id="editModalErrorMessage"></span>
                        <button type="button" class="btn-close" data-bs-dismiss="alert" aria-label="Close"></button>
                    </div>

                    <div class="alert alert-warning">
                        <i class="fas fa-exclamation-triangle"></i>
                        External kullanıcı bilgilerini dikkatli bir şekilde düzenleyin.
                    </div>

                    <input type="hidden" id="external-edit-userId" name="userId">

                    <div class="alert alert-info">
                        <i class="fas fa-info-circle"></i>
                        Şifreyi değiştirmek istemiyorsanız boş bırakın.
                    </div>

                    <div class="row">
                        <div class="col-md-6">
                            <div class="mb-3">
                                <label for="external-edit-userName" class="form-label">
                                    <i class="fas fa-user"></i> Kullanıcı Adı (Değiştirilemez)
                                </label>
                                <input type="text" class="form-control" id="external-edit-userName" name="userName" readonly>
                            </div>
                        </div>
                        <div class="col-md-6">
                            <div class="mb-3">
                                <label for="external-edit-email" class="form-label">
                                    <i class="fas fa-envelope"></i> Email *
                                </label>
                                <input type="email" class="form-control" id="external-edit-email" name="email" required>
                                <div class="invalid-feedback"></div>
                            </div>
                        </div>
                    </div>

                    <div class="row">
                        <div class="col-md-6">
                            <div class="mb-3">
                                <label for="external-edit-firstName" class="form-label">
                                    <i class="fas fa-user-tag"></i> Ad *
                                </label>
                                <input type="text" class="form-control" id="external-edit-firstName" name="firstName" required>
                                <div class="invalid-feedback"></div>
                                <div class="form-text">En az 2 karakter olmalıdır.</div>
                            </div>
                        </div>
                        <div class="col-md-6">
                            <div class="mb-3">
                                <label for="external-edit-lastName" class="form-label">
                                    <i class="fas fa-user-tag"></i> Soyad *
                                </label>
                                <input type="text" class="form-control" id="external-edit-lastName" name="lastName" required>
                                <div class="invalid-feedback"></div>
                                <div class="form-text">En az 2 karakter olmalıdır.</div>
                            </div>
                        </div>
                    </div>

                    <div class="row">
                        <div class="col-md-6">
                            <div class="mb-3">
                                <label for="external-edit-phoneNumber" class="form-label">
                                    <i class="fas fa-phone"></i> Telefon Numarası *
                                </label>
                                <input type="tel" class="form-control" id="external-edit-phoneNumber" name="phoneNumber" required placeholder="0532XXXXXXX">
                                <div class="invalid-feedback"></div>
                                <div class="form-text">Örnek: 0532XXXXXXX</div>
                            </div>
                        </div>
                        <div class="col-md-6">
                            <div class="mb-3">
                                <label for="external-edit-code" class="form-label">
                                    <i class="fas fa-code"></i> Kod *
                                </label>
                                <input type="text" class="form-control" id="external-edit-code" name="code" required placeholder="ABC123" maxlength="20">
                                <div class="invalid-feedback"></div>
                                <div class="form-text">2-20 karakter, büyük harf ve rakam</div>
                            </div>
                        </div>
                    </div>

                    <div class="row">
                        <div class="col-md-12">
                            <div class="mb-3">
                                <label for="external-edit-userLoginType" class="form-label">
                                    <i class="fas fa-user-cog"></i> Kullanıcı Tipi *
                                </label>
                                <select class="form-control" id="external-edit-userLoginType" name="userLoginType" required>
                                    <option value="1">Personal</option>
                                    <option value="2">Shared</option>
                                    <option value="3">Service</option>
                                </select>
                                <div class="invalid-feedback"></div>
                            </div>
                        </div>
                    </div>

                    <div class="row">
                        <div class="col-md-6">
                            <div class="mb-3">
                                <label for="external-edit-password" class="form-label">
                                    <i class="fas fa-lock"></i> Yeni Şifre (Opsiyonel)
                                </label>
                                <div class="input-group">
                                    <input type="password" class="form-control" id="external-edit-password" name="password" autocomplete="new-password">
                                    <button class="btn btn-outline-secondary" type="button" onclick="togglePassword('external-edit-password', this)">
                                        <i class="fas fa-eye"></i>
                                    </button>
                                </div>
                                <div class="invalid-feedback"></div>
                                <div class="form-text">En az 6 karakter olmalıdır.</div>
                            </div>
                        </div>
                        <div class="col-md-6">
                            <div class="mb-3">
                                <label for="external-edit-confirmPassword" class="form-label">
                                    <i class="fas fa-lock"></i> Yeni Şifre Tekrar
                                </label>
                                <div class="input-group">
                                    <input type="password" class="form-control" id="external-edit-confirmPassword" name="confirmPassword" autocomplete="new-password">
                                    <button class="btn btn-outline-secondary" type="button" onclick="togglePassword('external-edit-confirmPassword', this)">
                                        <i class="fas fa-eye"></i>
                                    </button>
                                </div>
                                <div class="invalid-feedback"></div>
                                <div class="valid-feedback">Şifreler eşleşiyor!</div>
                            </div>
                        </div>
                    </div>
                </div>

                <div class="modal-footer">
                    <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">
                        <i class="fas fa-times"></i> İptal
                    </button>
                    <button type="submit" class="btn btn-warning">
                        <i class="fas fa-save"></i> Güncelle
                    </button>
                </div>
            </form>
        </div>
    </div>
</div>

@section Scripts {
    <script>
        // ======================== GLOBAL STATE ========================
        const AppState = {
            selectedMachineApiAddress: null,
            addModalInstance: null,
            editModalInstance: null,
            dataTableInstance: null
        };

        // ======================== DOM READY ========================
        $(document).ready(function() {
            initializeApp();
        });

        function initializeApp() {
            loadSelectedMachineInfo();
            initializeModals();
            initializeDataTable();
            setupEventHandlers();
        }

        // ======================== MODAL INITIALIZATION ========================
        function initializeModals() {
            const addModal = document.getElementById('addExternalUserModal');
            const editModal = document.getElementById('editExternalUserModal');

            if (addModal) {
                AppState.addModalInstance = new bootstrap.Modal(addModal);
                addModal.addEventListener('shown.bs.modal', onAddModalShown);
            }

            if (editModal) {
                AppState.editModalInstance = new bootstrap.Modal(editModal);
                editModal.addEventListener('shown.bs.modal', onEditModalShown);
            }
        }

        function onAddModalShown() {
            document.getElementById('external-admin-userName').focus();
            setupPasswordMatching('external-admin-password', 'external-admin-confirmPassword');
            document.getElementById('addExternalUserForm').reset();
            clearFormValidation('addExternalUserForm');
            hideModalError('add');
        }

        function onEditModalShown() {
            document.getElementById('external-edit-email').focus();
            setupPasswordMatching('external-edit-password', 'external-edit-confirmPassword');
            clearFormValidation('editExternalUserForm');
            hideModalError('edit');
        }

        // ======================== DATA TABLE INITIALIZATION ========================
        function initializeDataTable() {
            const table = document.getElementById('externalUsersTable');
            if (!table) return;

            try {
                AppState.dataTableInstance = $(table).DataTable({
                    language: { url: '//cdn.datatables.net/plug-ins/1.10.24/i18n/Turkish.json' },
                    pageLength: 25,
                    order: [[2, 'asc']],
                    columnDefs: [{ orderable: false, targets: -1 }],
                    responsive: true,
                    autoWidth: false
                });
            } catch (error) {
                console.warn('DataTable initialization failed:', error);
            }
        }

        // ======================== EVENT HANDLERS ========================
        function setupEventHandlers() {
            const addForm = document.getElementById('addExternalUserForm');
            const editForm = document.getElementById('editExternalUserForm');

            if (addForm) {
                addForm.addEventListener('submit', handleAddUserSubmit);
            }

            if (editForm) {
                editForm.addEventListener('submit', handleEditUserSubmit);
            }
        }

        // ======================== WINDOW METHODS (For HTML onclick) ========================
        window.editUser = async function(userId) {
            if (!await checkSelectedMachine()) {
                showAlert('error', 'Önce bir makine seçiniz!');
                return;
            }

            try {
                const response = await fetchWithTimeout(`/ExternalUser/GetUserById?userId=${userId}`, {
                    method: 'GET',
                    headers: { 'Content-Type': 'application/json' }
                });

                if (!response.ok) {
                    showAlert('error', `Kullanıcı bilgileri alınamadı! (HTTP ${response.status})`);
                    return;
                }

                const data = await response.json();

                if (!data.success) {
                    showAlert('error', data.message || 'Kullanıcı bilgileri alınamadı!');
                    return;
                }

                const user = data.data?.item || data.data;

                if (!user) {
                    showAlert('error', 'Kullanıcı verisi bulunamadı!');
                    return;
                }

                populateEditForm(user);
                AppState.editModalInstance.show();

            } catch (error) {
                showAlert('error', `Hata: ${error.message}`);
            }
        };

        window.deleteUser = async function(userId, userName) {
            if (!await checkSelectedMachine()) {
                showAlert('error', 'Önce bir makine seçiniz!');
                return;
            }

            const confirmed = await confirmAction(
                'Emin misiniz?',
                `"${userName}" adlı external kullanıcısını silmek istediğinizden emin misiniz?`,
                'warning'
            );

            if (confirmed) {
                await performDeleteUser(userId);
            }
        };

        window.showAddExternalUserModal = function() {
            if (!AppState.selectedMachineApiAddress) {
                showAlert('error', 'Önce bir makine seçiniz!');
                return;
            }
            AppState.addModalInstance.show();
        };

        window.refreshExternalUserList = function() {
            location.reload();
        };

        window.togglePassword = function(fieldId, button) {
            const field = document.getElementById(fieldId);
            const icon = button.querySelector('i');

            if (field.type === 'password') {
                field.type = 'text';
                icon.classList.replace('fa-eye', 'fa-eye-slash');
            } else {
                field.type = 'password';
                icon.classList.replace('fa-eye-slash', 'fa-eye');
            }
        };

        // ======================== FORM HANDLERS ========================
        async function handleAddUserSubmit(e) {
            e.preventDefault();
            hideModalError('add');

            if (!await checkSelectedMachine()) {
                showModalError('Önce bir makine seçiniz!', 'add');
                return;
            }

            const formData = {
                UserName: getInputValue('external-admin-userName'),
                Email: getInputValue('external-admin-email'),
                FirstName: getInputValue('external-admin-firstName'),
                LastName: getInputValue('external-admin-lastName'),
                PhoneNumber: getInputValue('external-admin-phoneNumber'),
                Code: getInputValue('external-admin-code').toUpperCase(),
                UserLoginType: parseInt(getInputValue('external-admin-userLoginType')),
                Password: getInputValue('external-admin-password'),
                ConfirmPassword: getInputValue('external-admin-confirmPassword'),
                IsActive: true
            };

            const validationError = validateAddUserForm(formData);
            if (validationError) {
                showModalError(validationError, 'add');
                return;
            }

            await submitForm('/ExternalUser/CreateUser', formData, 'POST', 'add');
        }

        async function handleEditUserSubmit(e) {
            e.preventDefault();
            hideModalError('edit');

            if (!await checkSelectedMachine()) {
                showModalError('Önce bir makine seçiniz!', 'edit');
                return;
            }

            const formData = {
                id: getInputValue('external-edit-userId'),
                email: getInputValue('external-edit-email'),
                phoneNumber: getInputValue('external-edit-phoneNumber'),
                firstName: getInputValue('external-edit-firstName'),
                lastName: getInputValue('external-edit-lastName'),
                code: getInputValue('external-edit-code').toUpperCase(),
                roles: [],
                userLoginType: parseInt(getInputValue('external-edit-userLoginType'))
            };

            const validationError = validateEditUserForm(formData);
            if (validationError) {
                showModalError(validationError, 'edit');
                return;
            }

            const password = getInputValue('external-edit-password');
            if (password) {
                const confirmPassword = getInputValue('external-edit-confirmPassword');
                if (password !== confirmPassword) {
                    showModalError('Şifreler eşleşmiyor!', 'edit');
                    return;
                }
                if (password.length < 6) {
                    showModalError('Şifre en az 6 karakter olmalıdır!', 'edit');
                    return;
                }
                formData.password = password;
            }

            await submitForm('/ExternalUser/UpdateUser', formData, 'PUT', 'edit');
        }

        // ======================== FORM POPULATION ========================
        function populateEditForm(user) {
            setInputValue('external-edit-userId', user.id || '');
            setInputValue('external-edit-userName', user.username || '');
            setInputValue('external-edit-email', user.eMail || '');
            setInputValue('external-edit-firstName', user.firstName || '');
            setInputValue('external-edit-lastName', user.lastName || '');
            setInputValue('external-edit-phoneNumber', user.phoneNumber || '');
            setInputValue('external-edit-code', user.code || '');

            const typeValue = parseUserLoginType(user.userLoginType);
            setInputValue('external-edit-userLoginType', typeValue);

            setInputValue('external-edit-password', '');
            setInputValue('external-edit-confirmPassword', '');
        }

        function parseUserLoginType(type) {
            if (typeof type === 'string') {
                const typeMap = { 'personal': '1', 'service': '3' };
                return typeMap[type.toLowerCase()] || '2';
            }
            if (typeof type === 'number' && [1, 2, 3].includes(type)) {
                return type.toString();
            }
            return '2'; // Default: Shared
        }

        // ======================== VALIDATION ========================
        function validateAddUserForm(data) {
            if (!data.UserName?.trim()) return 'Kullanıcı adı zorunludur!';
            if (!data.Email?.trim()) return 'Email adresi zorunludur!';
            if (!data.FirstName || data.FirstName.length < 2) return 'Ad en az 2 karakter olmalıdır!';
            if (!data.LastName || data.LastName.length < 2) return 'Soyad en az 2 karakter olmalıdır!';
            if (!data.PhoneNumber) return 'Telefon numarası zorunludur!';
            if (!/^0\d{10}$/.test(data.PhoneNumber)) return 'Telefon numarası 0 ile başlamalı ve 11 haneli olmalıdır!';
            if (!data.Code || data.Code.length < 2 || data.Code.length > 20) return 'Kod 2-20 karakter arasında olmalıdır!';
            if (!/^[A-Z0-9]+$/.test(data.Code)) return 'Kod sadece büyük harf ve rakam içermelidir!';
            if (!data.UserLoginType || isNaN(data.UserLoginType)) return 'Kullanıcı tipi seçimi zorunludur!';
            if (!data.Password || data.Password.length < 6) return 'Şifre en az 6 karakter olmalıdır!';
            if (!data.ConfirmPassword) return 'Şifre tekrarı zorunludur!';
            if (data.Password !== data.ConfirmPassword) return 'Şifreler eşleşmiyor!';
            return null;
        }

        function validateEditUserForm(data) {
            if (!data.email?.trim()) return 'Email adresi zorunludur!';
            if (!data.firstName || data.firstName.length < 2) return 'Ad en az 2 karakter olmalıdır!';
            if (!data.lastName || data.lastName.length < 2) return 'Soyad en az 2 karakter olmalıdır!';
            if (!data.phoneNumber) return 'Telefon numarası zorunludur!';
            if (!/^0\d{10}$/.test(data.phoneNumber)) return 'Telefon numarası 0 ile başlamalı ve 11 haneli olmalıdır!';
            if (!data.code || data.code.length < 2 || data.code.length > 20) return 'Kod 2-20 karakter arasında olmalıdır!';
            if (!/^[A-Z0-9]+$/.test(data.code)) return 'Kod sadece büyük harf ve rakam içermelidir!';
            return null;
        }

        // ======================== API CALLS ========================
        async function submitForm(endpoint, data, method, modalType) {
            const submitBtn = document.querySelector(`#${modalType === 'add' ? 'addExternalUserForm' : 'editExternalUserForm'} button[type="submit"]`);
            const originalText = submitBtn.innerHTML;

            const loadingText = `<i class="fas fa-spinner fa-spin"></i> ${method === 'POST' ? 'Kaydediliyor' : 'Güncelleniyor'}...`;
            submitBtn.innerHTML = loadingText;
            submitBtn.disabled = true;

            try {
                const response = await fetchWithTimeout(endpoint, {
                    method: method,
                    headers: { 'Content-Type': 'application/json' },
                    body: JSON.stringify(data)
                });

                const responseData = await response.json();

                if (response.ok && responseData.success) {
                    const message = method === 'POST'
                        ? 'External kullanıcı başarıyla eklendi!'
                        : 'External kullanıcı başarıyla güncellendi!';

                    await showAlert('success', message);
                    location.reload();
                } else {
                    showModalError(
                        responseData.message || `${method === 'POST' ? 'Ekleme' : 'Güncelleme'} başarısız!`,
                        modalType
                    );
                }
            } catch (error) {
                showModalError(`Hata: ${error.message}`, modalType);
            } finally {
                submitBtn.innerHTML = originalText;
                submitBtn.disabled = false;
            }
        }

        async function performDeleteUser(userId) {
            try {
                const response = await fetchWithTimeout('/ExternalUser/DeleteUser', {
                    method: 'DELETE',
                    headers: { 'Content-Type': 'application/json' },
                    body: JSON.stringify({ id: userId })
                });

                const data = await response.json();

                if (response.ok && data.success) {
                    await showAlert('success', 'External kullanıcı başarıyla silindi.');
                    location.reload();
                } else {
                    showAlert('error', data.message || 'Silme işlemi başarısız!');
                }
            } catch (error) {
                showAlert('error', `Silme hatası: ${error.message}`);
            }
        }

        // ======================== UTILITY FUNCTIONS ========================
        async function fetchWithTimeout(url, options = {}, timeout = 30000) {
            const controller = new AbortController();
            const timeoutId = setTimeout(() => controller.abort(), timeout);

            try {
                return await fetch(url, {
                    ...options,
                    signal: controller.signal
                });
            } finally {
                clearTimeout(timeoutId);
            }
        }

        async function loadSelectedMachineInfo() {
            try {
                const response = await fetchWithTimeout('/Home/GetSelectedMachine');
                if (response.ok) {
                    const data = await response.json();
                    if (data.success && data.data) {
                        AppState.selectedMachineApiAddress = data.data.apiAddress;
                    }
                }
            } catch (error) {
                console.error('Selected machine info yüklenirken hata:', error);
            }
        }

        async function checkSelectedMachine() {
            if (!AppState.selectedMachineApiAddress) {
                await loadSelectedMachineInfo();
            }
            return AppState.selectedMachineApiAddress != null;
        }

        function getInputValue(id) {
            return (document.getElementById(id)?.value || '').trim();
        }

        function setInputValue(id, value) {
            const element = document.getElementById(id);
            if (element) element.value = value;
        }

        function clearFormValidation(formId) {
            const form = document.getElementById(formId);
            if (form) {
                form.querySelectorAll('.is-invalid, .is-valid').forEach(el => {
                    el.classList.remove('is-invalid', 'is-valid');
                });
            }
        }

        function setupPasswordMatching(passwordId, confirmPasswordId) {
            const passwordField = document.getElementById(passwordId);
            const confirmField = document.getElementById(confirmPasswordId);

            if (!passwordField || !confirmField) return;

            const checkMatch = () => {
                const password = passwordField.value;
                const confirm = confirmField.value;

                confirmField.classList.remove('is-valid', 'is-invalid');

                if (confirm === '') return;

                if (password === confirm && password !== '') {
                    confirmField.classList.add('is-valid');
                } else {
                    confirmField.classList.add('is-invalid');
                }
            };

            passwordField.addEventListener('input', checkMatch);
            confirmField.addEventListener('input', checkMatch);
        }

        function showModalError(message, type) {
            const errorAlert = document.getElementById(`${type === 'add' ? 'modalValidationError' : 'editModalValidationError'}`);
            const errorMessage = document.getElementById(`${type === 'add' ? 'modalErrorMessage' : 'editModalErrorMessage'}`);

            if (errorMessage) errorMessage.textContent = message;
            if (errorAlert) {
                errorAlert.classList.remove('d-none');
                errorAlert.scrollIntoView({ behavior: 'smooth', block: 'nearest' });
            }
        }

        function hideModalError(type) {
            const errorAlert = document.getElementById(`${type === 'add' ? 'modalValidationError' : 'editModalValidationError'}`);
            if (errorAlert) errorAlert.classList.add('d-none');
        }

        async function confirmAction(title, text, icon) {
            if (typeof Swal !== 'undefined') {
                const result = await Swal.fire({
                    title: title,
                    text: text,
                    icon: icon,
                    showCancelButton: true,
                    confirmButtonColor: '#dc3545',
                    cancelButtonColor: '#6c757d',
                    confirmButtonText: 'Evet',
                    cancelButtonText: 'İptal'
                });
                return result.isConfirmed;
            } else {
                return confirm(text);
            }
        }

        async function showAlert(type, message) {
            if (typeof Swal !== 'undefined') {
                await Swal.fire(
                    type === 'success' ? 'Başarılı!' : 'Hata!',
                    message,
                    type
                );
            } else {
                alert(message);
            }
        }
    </script>
}