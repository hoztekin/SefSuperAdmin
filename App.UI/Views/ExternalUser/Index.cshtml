@model List<ExternalUserListDto>

@{
    ViewData["Title"] = "External Kullanıcı Yönetimi";
    var selectedMachine = ViewData["SelectedMachine"] as SelectedMachineInfo;
}

<!-- ViewComponent Navigation -->
@await Component.InvokeAsync("RoleBasedNavigation", new { showLogo = true })

<div class="container-fluid">
    <div class="row mb-4">
        <div class="col-12">
            <div class="d-flex justify-content-between align-items-center">
                <div>
                    <h2><i class="fas fa-users-cog text-primary"></i> External Kullanıcı Yönetimi</h2>
                    <p class="text-muted">
                        @if (selectedMachine != null)
                        {
                            <text>@selectedMachine.BranchName makinesindeki kullanıcıları yönetin</text>
                        }
                        else
                        {
                            <text>External API kullanıcılarını yönetin</text>
                        }
                    </p>
                </div>
                <div>
                    <a href="/Home/Index" class="btn btn-secondary">
                        <i class="fas fa-arrow-left"></i> Makine Seçimine Dön
                    </a>
                </div>
            </div>
        </div>
    </div>

    <div class="row">
        <div class="col-12">
            <div class="card shadow">
                <div class="card-header bg-success text-white">
                    <div class="d-flex justify-content-between align-items-center">
                        <h6 class="m-0 font-weight-bold">
                            <i class="fas fa-list"></i> External Kullanıcı Listesi (@Model.Count kullanıcı)
                        </h6>
                        <div>
                            <button onclick="showAddExternalUserModal()" class="btn btn-sm btn-light me-2">
                                <i class="fas fa-plus"></i> Ekle
                            </button>
                            <button onclick="refreshExternalUserList()" class="btn btn-sm btn-outline-light">
                                <i class="fas fa-sync-alt"></i> Yenile
                            </button>
                        </div>
                    </div>
                </div>
                <div class="card-body">
                    @if (Model.Any())
                    {
                        <div class="table-responsive">
                            <table class="table table-bordered table-hover" id="externalUsersTable">
                                <thead class="thead-dark">
                                    <tr>
                                        <th><i class="fas fa-user"></i> Kullanıcı Adı</th>
                                        <th><i class="fas fa-envelope"></i> Email</th>
                                        <th><i class="fas fa-user-tag"></i> Ad Soyad</th>
                                        <th><i class="fas fa-building"></i> Şube Adı</th>
                                        <th><i class="fas fa-check-circle"></i> Durum</th>
                                        <th><i class="fas fa-cog"></i> İşlemler</th>
                                    </tr>
                                </thead>
                                <tbody>
                                    @foreach (var user in Model)
                                    {
                                        <tr>
                                            <td class="align-middle">
                                                <strong>@user.UserName</strong>
                                                <br><small class="text-muted">ID: @user.Id.Substring(0, Math.Min(8, user.Id.Length))...</small>
                                            </td>
                                            <td class="align-middle">@user.Email</td>
                                            <td class="align-middle">@user.FullName</td>
                                            <td class="align-middle">@user.BranchName</td>
                                            <td class="align-middle">
                                                @if (user.IsActive)
                                                {
                                                    <span class="badge bg-success">Aktif</span>
                                                }
                                                else
                                                {
                                                    <span class="badge bg-danger">Pasif</span>
                                                }
                                            </td>
                                            <td class="align-middle">
                                                <button class="btn btn-sm btn-primary" onclick="editUser('@user.Id')">
                                                    <i class="fas fa-edit"></i> Düzenle
                                                </button>
                                                <button class="btn btn-sm btn-danger" onclick="deleteUser('@user.Id', '@user.UserName')">
                                                    <i class="fas fa-trash"></i> Sil
                                                </button>
                                            </td>
                                        </tr>
                                    }
                                </tbody>
                            </table>
                        </div>
                    }
                    else
                    {
                        <div class="text-center py-5">
                            <i class="fas fa-users fa-3x text-muted mb-3"></i>
                            <h4 class="text-muted">Kullanıcı bulunamadı</h4>
                            <p class="text-muted">Henüz hiç kullanıcı kaydı yapılmamış.</p>
                        </div>
                    }
                </div>
            </div>
        </div>
    </div>
</div>

<!-- External Kullanıcı Ekleme Modal -->
<div class="modal fade" id="addExternalUserModal" tabindex="-1" aria-hidden="true">
    <div class="modal-dialog modal-lg">
        <div class="modal-content">
            <div class="modal-header bg-success text-white">
                <h5 class="modal-title">
                    <i class="fas fa-user-plus"></i> Yeni External Kullanıcı Ekle
                </h5>
                <button type="button" class="btn-close btn-close-white" data-bs-dismiss="modal"></button>
            </div>
            <form id="addExternalUserForm">
                <div class="modal-body">

                    <div class="alert alert-danger alert-dismissible fade show d-none" id="modalValidationError" role="alert">
                        <i class="fas fa-exclamation-circle me-2"></i>
                        <span id="modalErrorMessage"></span>
                        <button type="button" class="btn-close" data-bs-dismiss="alert" aria-label="Close"></button>
                    </div>

                    <div class="alert alert-info">
                        <i class="fas fa-info-circle"></i>
                        External makineye kullanıcı eklenecektir. Zorunlu alanları doldurun.
                    </div>

                    <div class="row">
                        <div class="col-md-6">
                            <div class="mb-3">
                                <label for="external-admin-userName" class="form-label">
                                    <i class="fas fa-user"></i> Kullanıcı Adı *
                                </label>
                                <input type="text" class="form-control" id="external-admin-userName" name="userName" required autocomplete="off">
                                <div class="invalid-feedback"></div>
                            </div>
                        </div>
                        <div class="col-md-6">
                            <div class="mb-3">
                                <label for="external-admin-email" class="form-label">
                                    <i class="fas fa-envelope"></i> Email *
                                </label>
                                <input type="email" class="form-control" id="external-admin-email" name="email" required autocomplete="off">
                                <div class="invalid-feedback"></div>
                            </div>
                        </div>
                    </div>

                    <div class="row">
                        <div class="col-md-6">
                            <div class="mb-3">
                                <label for="external-admin-firstName" class="form-label">
                                    <i class="fas fa-user-tag"></i> Ad *
                                </label>
                                <input type="text" class="form-control" id="external-admin-firstName" name="firstName" required>
                                <div class="invalid-feedback"></div>
                                <div class="form-text">En az 2 karakter olmalıdır.</div>
                            </div>
                        </div>
                        <div class="col-md-6">
                            <div class="mb-3">
                                <label for="external-admin-lastName" class="form-label">
                                    <i class="fas fa-user-tag"></i> Soyad *
                                </label>
                                <input type="text" class="form-control" id="external-admin-lastName" name="lastName" required>
                                <div class="invalid-feedback"></div>
                                <div class="form-text">En az 2 karakter olmalıdır.</div>
                            </div>
                        </div>
                    </div>

                    <div class="row">
                        <div class="col-md-4">
                            <div class="mb-3">
                                <label for="external-admin-phoneNumber" class="form-label">
                                    <i class="fas fa-phone"></i> Telefon Numarası *
                                </label>
                                <input type="tel" class="form-control" id="external-admin-phoneNumber" name="phoneNumber" required placeholder="0532XXXXXXX">
                                <div class="invalid-feedback"></div>
                                <div class="form-text">Örnek: 0532XXXXXXX</div>
                            </div>
                        </div>
                        <div class="col-md-4">
                            <div class="mb-3">
                                <label for="external-admin-code" class="form-label">
                                    <i class="fas fa-code"></i> Kod *
                                </label>
                                <input type="text" class="form-control" id="external-admin-code" name="code" required placeholder="ABC123" maxlength="20">
                                <div class="invalid-feedback"></div>
                                <div class="form-text">2-20 karakter, büyük harf ve rakam</div>
                            </div>
                        </div>
                        <div class="col-md-4">
                            <div class="mb-3">
                                <label for="external-admin-userLoginType" class="form-label">
                                    <i class="fas fa-user-cog"></i> Kullanıcı Tipi *
                                </label>
                                <select class="form-control" id="external-admin-userLoginType" name="userLoginType" required>
                                    <option value="">Seçiniz...</option>
                                    <option value="1">Personal</option>
                                    <option value="2" selected>Shared</option>
                                    <option value="3">Service</option>
                                </select>
                                <div class="invalid-feedback"></div>
                                <div class="form-text">Varsayılan: Shared</div>
                            </div>
                        </div>
                    </div>

                    <div class="row">
                        <div class="col-md-6">
                            <div class="mb-3">
                                <label for="external-admin-password" class="form-label">
                                    <i class="fas fa-lock"></i> Şifre *
                                </label>
                                <div class="input-group">
                                    <input type="password" class="form-control" id="external-admin-password" name="password" required autocomplete="new-password">
                                    <button class="btn btn-outline-secondary" type="button" onclick="toggleExternalPassword('external-admin-password', this)">
                                        <i class="fas fa-eye"></i>
                                    </button>
                                </div>
                                <div class="invalid-feedback"></div>
                                <div class="form-text"><strong>En az 6 karakter olmalıdır.</strong></div>
                            </div>
                        </div>
                        <div class="col-md-6">
                            <div class="mb-3">
                                <label for="external-admin-confirmPassword" class="form-label">
                                    <i class="fas fa-lock"></i> Şifre Tekrar *
                                </label>
                                <div class="input-group">
                                    <input type="password" class="form-control" id="external-admin-confirmPassword" name="confirmPassword" required autocomplete="new-password">
                                    <button class="btn btn-outline-secondary" type="button" onclick="toggleExternalPassword('external-admin-confirmPassword', this)">
                                        <i class="fas fa-eye"></i>
                                    </button>
                                </div>
                                <div class="invalid-feedback"></div>
                                <div class="valid-feedback">Şifreler eşleşiyor!</div>
                            </div>
                        </div>
                    </div>
                </div>

                <div class="modal-footer">
                    <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">
                        <i class="fas fa-times"></i> İptal
                    </button>
                    <button type="submit" class="btn btn-success">
                        <i class="fas fa-save"></i> External Kullanıcı Ekle
                    </button>
                </div>
            </form>
        </div>
    </div>
</div>

<!-- External Kullanıcı Düzenleme Modal -->
<div class="modal fade" id="editExternalUserModal" tabindex="-1" aria-hidden="true">
    <div class="modal-dialog modal-lg">
        <div class="modal-content">
            <div class="modal-header bg-warning text-dark">
                <h5 class="modal-title">
                    <i class="fas fa-user-edit"></i> External Kullanıcı Düzenle
                </h5>
                <button type="button" class="btn-close" data-bs-dismiss="modal"></button>
            </div>
            <form id="editExternalUserForm">
                <div class="modal-body">
                    <!-- Edit Modal için Hata Mesajı -->
                    <div class="alert alert-danger alert-dismissible fade show d-none" id="editModalValidationError" role="alert">
                        <i class="fas fa-exclamation-circle me-2"></i>
                        <span id="editModalErrorMessage"></span>
                        <button type="button" class="btn-close" data-bs-dismiss="alert" aria-label="Close"></button>
                    </div>

                    <div class="alert alert-warning">
                        <i class="fas fa-exclamation-triangle"></i>
                        External kullanıcı bilgilerini dikkatli bir şekilde düzenleyin.
                    </div>

                    <input type="hidden" id="external-edit-userId" name="userId">

                    <div class="alert alert-info">
                        <i class="fas fa-info-circle"></i>
                        Şifreyi değiştirmek istemiyorsanız boş bırakın.
                    </div>

                    <div class="row">
                        <div class="col-md-6">
                            <div class="mb-3">
                                <label for="external-edit-userName" class="form-label">
                                    <i class="fas fa-user"></i> Kullanıcı Adı (Değiştirilemez)
                                </label>
                                <input type="text" class="form-control" id="external-edit-userName" name="userName" readonly>
                            </div>
                        </div>
                        <div class="col-md-6">
                            <div class="mb-3">
                                <label for="external-edit-email" class="form-label">
                                    <i class="fas fa-envelope"></i> Email *
                                </label>
                                <input type="email" class="form-control" id="external-edit-email" name="email" required>
                                <div class="invalid-feedback"></div>
                            </div>
                        </div>
                    </div>

                    <div class="row">
                        <div class="col-md-6">
                            <div class="mb-3">
                                <label for="external-edit-firstName" class="form-label">
                                    <i class="fas fa-user-tag"></i> Ad *
                                </label>
                                <input type="text" class="form-control" id="external-edit-firstName" name="firstName" required>
                                <div class="invalid-feedback"></div>
                                <div class="form-text">En az 2 karakter olmalıdır.</div>
                            </div>
                        </div>
                        <div class="col-md-6">
                            <div class="mb-3">
                                <label for="external-edit-lastName" class="form-label">
                                    <i class="fas fa-user-tag"></i> Soyad *
                                </label>
                                <input type="text" class="form-control" id="external-edit-lastName" name="lastName" required>
                                <div class="invalid-feedback"></div>
                                <div class="form-text">En az 2 karakter olmalıdır.</div>
                            </div>
                        </div>
                    </div>

                    <div class="row">
                        <div class="col-md-6">
                            <div class="mb-3">
                                <label for="external-edit-phoneNumber" class="form-label">
                                    <i class="fas fa-phone"></i> Telefon Numarası *
                                </label>
                                <input type="tel" class="form-control" id="external-edit-phoneNumber" name="phoneNumber" required placeholder="0532XXXXXXX">
                                <div class="invalid-feedback"></div>
                                <div class="form-text">Örnek: 0532XXXXXXX</div>
                            </div>
                        </div>
                        <div class="col-md-6">
                            <div class="mb-3">
                                <label for="external-edit-code" class="form-label">
                                    <i class="fas fa-code"></i> Kod *
                                </label>
                                <input type="text" class="form-control" id="external-edit-code" name="code" required placeholder="ABC123" maxlength="20">
                                <div class="invalid-feedback"></div>
                                <div class="form-text">2-20 karakter, büyük harf ve rakam</div>
                            </div>
                        </div>
                    </div>

                    <div class="row">
                        <div class="col-md-6">
                            <div class="mb-3">
                                <label for="external-edit-userLoginType" class="form-label">
                                    <i class="fas fa-user-cog"></i> Kullanıcı Tipi *
                                </label>
                                <select class="form-control" id="external-edit-userLoginType" name="userLoginType" required>
                                    <option value="1">Personal</option>
                                    <option value="2">Shared</option>
                                    <option value="3">Service</option>
                                </select>
                                <div class="invalid-feedback"></div>
                            </div>
                        </div>
                        <div class="col-md-6">
                            <div class="mb-3">
                                <label for="external-edit-isActive" class="form-label">
                                    <i class="fas fa-toggle-on"></i> Durum *
                                </label>
                                <select class="form-control" id="external-edit-isActive" name="isActive" required>
                                    <option value="true">Aktif</option>
                                    <option value="false">Pasif</option>
                                </select>
                                <div class="invalid-feedback"></div>
                            </div>
                        </div>
                    </div>

                    <div class="row">
                        <div class="col-md-6">
                            <div class="mb-3">
                                <label for="external-edit-password" class="form-label">
                                    <i class="fas fa-lock"></i> Yeni Şifre (Opsiyonel)
                                </label>
                                <div class="input-group">
                                    <input type="password" class="form-control" id="external-edit-password" name="password" autocomplete="new-password">
                                    <button class="btn btn-outline-secondary" type="button" onclick="toggleExternalPassword('external-edit-password', this)">
                                        <i class="fas fa-eye"></i>
                                    </button>
                                </div>
                                <div class="invalid-feedback"></div>
                                <div class="form-text">En az 6 karakter olmalıdır.</div>
                            </div>
                        </div>
                        <div class="col-md-6">
                            <div class="mb-3">
                                <label for="external-edit-confirmPassword" class="form-label">
                                    <i class="fas fa-lock"></i> Yeni Şifre Tekrar
                                </label>
                                <div class="input-group">
                                    <input type="password" class="form-control" id="external-edit-confirmPassword" name="confirmPassword" autocomplete="new-password">
                                    <button class="btn btn-outline-secondary" type="button" onclick="toggleExternalPassword('external-edit-confirmPassword', this)">
                                        <i class="fas fa-eye"></i>
                                    </button>
                                </div>
                                <div class="invalid-feedback"></div>
                                <div class="valid-feedback">Şifreler eşleşiyor!</div>
                            </div>
                        </div>
                    </div>
                </div>

                <div class="modal-footer">
                    <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">
                        <i class="fas fa-times"></i> İptal
                    </button>
                    <button type="submit" class="btn btn-warning">
                        <i class="fas fa-save"></i> Güncelle
                    </button>
                </div>
            </form>
        </div>
    </div>
</div>

@section Scripts {
    <script>
        // Global değişkenler
        let selectedMachineApiAddress = null;

        $(document).ready(function() {
            // Seçili makine bilgisini yükle
            loadSelectedMachineInfo();

            // DataTable'ı başlat
            if ($('#externalUsersTable').length > 0) {
                initDataTable();
            }

            // Modal event handlers
            $('#addExternalUserModal').on('shown.bs.modal', function () {
                $('#external-admin-userName').focus();
                setupPasswordMatching('external-admin-password', 'external-admin-confirmPassword');
                $('#addExternalUserForm')[0].reset();
                $('#addExternalUserForm .is-invalid, #addExternalUserForm .is-valid').removeClass('is-invalid is-valid');
                hideModalError();
            });

            $('#editExternalUserModal').on('shown.bs.modal', function () {
                $('#external-edit-email').focus();
                setupPasswordMatching('external-edit-password', 'external-edit-confirmPassword');
                $('#editExternalUserForm .is-invalid, #editExternalUserForm .is-valid').removeClass('is-invalid is-valid');
                hideEditModalError();
            });

            // Form submit handlers
            setupFormSubmitHandlers();
        });

        // Mevcut HTML'de çağrılan fonksiyonlar
        window.editUser = async function(userId) {
            if (!await checkSelectedMachine()) {
                showError('Önce bir makine seçiniz!');
                return;
            }

            try {
                const response = await fetch(`/ExternalUser/GetUserById?userId=${userId}`, {
                    method: 'GET',
                    headers: {
                        'Content-Type': 'application/json'
                    }
                });

                if (!response.ok) {
                    showError('Kullanıcı bilgileri alınırken hata oluştu! HTTP ' + response.status);
                    return;
                }

                const data = await response.json();

                // Debug - API response yapısını göster
                console.log('Full API Response:', data);
                console.log('data.success:', data.success);
                console.log('data.data:', data.data);

                if (!data.success) {
                    showError(data.message || 'Kullanıcı bilgileri alınamadı!');
                    return;
                }

                // API response yapısı: { data: { item: {...} } } VEYA { data: {...} }
                // Swagger'a göre: response.data.item şeklinde geliyor
                let user = null;

                if (data.data && data.data.item) {
                    // Desktop API response pattern: data.item
                    user = data.data.item;
                    console.log('User from data.item:', user);
                } else if (data.data) {
                    // Direkt data içinde user
                    user = data.data;
                    console.log('User from data:', user);
                }

                if (!user) {
                    showError('Kullanıcı verisi bulunamadı!');
                    console.error('No user data found in response');
                    return;
                }

                // API'den gelen property isimleri (camelCase) ile eşleş

                // ID
                $('#external-edit-userId').val(user.id || '');
                console.log('ID:', user.id);

                // Kullanıcı adı (API'den "userName" geliyor)
                $('#external-edit-userName').val(user.userName || '');
                console.log('UserName:', user.userName);

                // Email (API'den "email" geliyor)
                $('#external-edit-email').val(user.email || '');
                console.log('Email:', user.email);

                // Ad (API'den "firstName" geliyor)
                $('#external-edit-firstName').val(user.firstName || '');
                console.log('FirstName:', user.firstName);

                // Soyad (API'den "lastName" geliyor)
                $('#external-edit-lastName').val(user.lastName || '');
                console.log('LastName:', user.lastName);

                // Telefon (API'de olmayabilir - opsiyonel)
                $('#external-edit-phoneNumber').val(user.phoneNumber || '');
                console.log('PhoneNumber:', user.phoneNumber);

                // Kod (API'den "code" geliyor)
                $('#external-edit-code').val(user.code || '');
                console.log('Code:', user.code);

                // UserLoginType (API'den gelmeyebilir - default Shared)
                let typeValue = '2'; // Default Shared
                if (user.userLoginType !== undefined && user.userLoginType !== null) {
                    if (typeof user.userLoginType === 'string') {
                        const typeStr = user.userLoginType.toLowerCase();
                        if (typeStr === 'personal') typeValue = '1';
                        else if (typeStr === 'service') typeValue = '3';
                        else typeValue = '2'; // Shared
                    } else if (typeof user.userLoginType === 'number') {
                        typeValue = user.userLoginType.toString();
                    }
                }
                $('#external-edit-userLoginType').val(typeValue);
                console.log('UserLoginType:', user.userLoginType, '-> set to:', typeValue);

                // IsActive (API'den "isActive" geliyor)
                const isActive = user.isActive !== undefined ? user.isActive : true;
                $('#external-edit-isActive').val(isActive ? 'true' : 'false');
                console.log('IsActive:', isActive);

                // Validation'ları temizle
                $('#editExternalUserForm .is-invalid, #editExternalUserForm .is-valid').removeClass('is-invalid is-valid');
                hideEditModalError();

                // Şifre alanlarını temizle
                $('#external-edit-password').val('');
                $('#external-edit-confirmPassword').val('');

                // ✅ EN SON MODAL'I AÇ - Tüm veriler dolduktan sonra
                $('#editExternalUserModal').modal('show');

                console.log('Modal açıldı ve tüm veriler dolduruldu');

            } catch (error) {
                console.error('Edit user error:', error);
                showError('Kullanıcı bilgileri alınırken bir hata oluştu: ' + error.message);
            }
        };

        window.deleteUser = async function(userId, userName) {
            if (!await checkSelectedMachine()) {
                showError('Önce bir makine seçiniz!');
                return;
            }

            if (typeof Swal !== 'undefined') {
                Swal.fire({
                    title: 'Emin misiniz?',
                    text: `"${userName}" adlı external kullanıcısını silmek istediğinizden emin misiniz?`,
                    icon: 'warning',
                    showCancelButton: true,
                    confirmButtonColor: '#dc3545',
                    cancelButtonColor: '#6c757d',
                    confirmButtonText: 'Evet, Sil!',
                    cancelButtonText: 'İptal'
                }).then(async (result) => {
                    if (result.isConfirmed) {
                        await performDeleteUser(userId, userName);
                    }
                });
            } else {
                if (confirm(`"${userName}" adlı external kullanıcısını silmek istediğinizden emin misiniz?`)) {
                    await performDeleteUser(userId, userName);
                }
            }
        };

        // Mevcut HTML'de çağrılan diğer fonksiyonlar
        window.showAddExternalUserModal = function() {
            if (!selectedMachineApiAddress) {
                showError('Önce bir makine seçiniz!');
                return;
            }
            $('#addExternalUserModal').modal('show');
        };

        window.refreshExternalUserList = function() {
            location.reload();
        };

        // Password toggle fonksiyonu
        window.toggleExternalPassword = function(fieldId, button) {
            const field = document.getElementById(fieldId);
            const icon = button.querySelector('i');

            if (field.type === 'password') {
                field.type = 'text';
                icon.classList.remove('fa-eye');
                icon.classList.add('fa-eye-slash');
            } else {
                field.type = 'password';
                icon.classList.remove('fa-eye-slash');
                icon.classList.add('fa-eye');
            }
        };

        // Form submit handlers
        function setupFormSubmitHandlers() {
            // Add User Form
            $('#addExternalUserForm').on('submit', async function(e) {
                e.preventDefault();

                hideModalError();

                if (!await checkSelectedMachine()) {
                    showModalError('Önce bir makine seçiniz!');
                    return;
                }

                // Form verilerini al - API'nin tam gereksinimlerine göre
                const formData = {
                    UserName: $('#external-admin-userName').val().trim(),
                    Email: $('#external-admin-email').val().trim(),
                    FirstName: $('#external-admin-firstName').val().trim(),
                    LastName: $('#external-admin-lastName').val().trim(),
                    PhoneNumber: $('#external-admin-phoneNumber').val().trim(),
                    Code: $('#external-admin-code').val().trim().toUpperCase(),
                    UserLoginType: parseInt($('#external-admin-userLoginType').val()),
                    Password: $('#external-admin-password').val(),
                    ConfirmPassword: $('#external-admin-confirmPassword').val(),
                    IsActive: true
                };

                // Form validation
                if (!formData.UserName) {
                    showModalError('Kullanıcı adı zorunludur!');
                    return;
                }

                if (!formData.Email) {
                    showModalError('Email adresi zorunludur!');
                    return;
                }

                if (!formData.FirstName || formData.FirstName.length < 2) {
                    showModalError('Ad en az 2 karakter olmalıdır!');
                    return;
                }

                if (!formData.LastName || formData.LastName.length < 2) {
                    showModalError('Soyad en az 2 karakter olmalıdır!');
                    return;
                }

                if (!formData.PhoneNumber) {
                    showModalError("Telefon numarası zorunludur!");
                    return;
                }

                if (!/^0\d{10}$/.test(formData.PhoneNumber)) {
                    showModalError("Telefon numarası 0 ile başlamalı ve 11 haneli olmalıdır!");
                    $('#external-admin-phoneNumber').addClass('is-invalid');
                    return;
                }

                if (!formData.Code || formData.Code.length < 2 || formData.Code.length > 20) {
                    showModalError('Kod 2-20 karakter arasında olmalıdır!');
                    return;
                }

                if (formData.Code && !/^[A-Z0-9]+$/.test(formData.Code)) {
                    showModalError('Kod sadece büyük harf ve rakam içermelidir!');
                    return;
                }

                if (!formData.UserLoginType || isNaN(formData.UserLoginType)) {
                    showModalError('Kullanıcı tipi seçimi zorunludur!');
                    return;
                }

                if (!formData.Password || formData.Password.length < 6) {
                    showModalError('Şifre en az 6 karakter olmalıdır!');
                    return;
                }

                if (!formData.ConfirmPassword) {
                    showModalError('Şifre tekrarı zorunludur!');
                    return;
                }

                if (formData.Password !== formData.ConfirmPassword) {
                    showModalError('Şifreler eşleşmiyor!');
                    return;
                }

                try {
                    const submitBtn = $(this).find('button[type="submit"]');
                    const originalText = submitBtn.html();
                    submitBtn.html('<i class="fas fa-spinner fa-spin"></i> Kaydediliyor...').prop('disabled', true);

                    const response = await fetch('/ExternalUser/CreateUser', {
                        method: 'POST',
                        headers: {
                            'Content-Type': 'application/json'
                        },
                        body: JSON.stringify(formData)
                    });

                    if (response.ok) {
                        const data = await response.json();
                        if (data.success) {
                            $('#addExternalUserModal').modal('hide');
                            showSuccess('External kullanıcı başarıyla eklendi!', () => {
                                location.reload();
                            });
                        } else {
                            showModalError(data.message || 'Kullanıcı eklenirken hata oluştu!');
                        }
                    } else {
                        const errorText = await response.text();
                        console.error('Response error:', errorText);
                        showModalError('Sunucu hatası: ' + response.status);
                    }

                    submitBtn.html(originalText).prop('disabled', false);
                } catch (error) {
                    console.error('Create user error:', error);
                    showModalError('Kullanıcı oluşturulurken hata oluştu!');
                    $(this).find('button[type="submit"]').html('<i class="fas fa-save"></i> External Kullanıcı Ekle').prop('disabled', false);
                }
            });

            // Edit User Form - TÜM ALANLAR DAHIL
            $('#editExternalUserForm').on('submit', async function(e) {
                e.preventDefault();

                hideEditModalError();

                if (!await checkSelectedMachine()) {
                    showEditModalError('Önce bir makine seçiniz!');
                    return;
                }

                const userId = $('#external-edit-userId').val();

                // API'nin beklediği tam format
                const formData = {
                    id: userId,
                    email: $('#external-edit-email').val().trim(),
                    phoneNumber: $('#external-edit-phoneNumber').val().trim(),
                    firstName: $('#external-edit-firstName').val().trim(),
                    lastName: $('#external-edit-lastName').val().trim(),
                    code: $('#external-edit-code').val().trim().toUpperCase(),
                    roles: [], // Boş array gönder
                    isActive: $('#external-edit-isActive').val() === 'true',
                    userLoginType: parseInt($('#external-edit-userLoginType').val())
                };

                // Validation
                if (!formData.email) {
                    showEditModalError('Email adresi zorunludur!');
                    return;
                }

                if (!formData.firstName || formData.firstName.length < 2) {
                    showEditModalError('Ad en az 2 karakter olmalıdır!');
                    return;
                }

                if (!formData.lastName || formData.lastName.length < 2) {
                    showEditModalError('Soyad en az 2 karakter olmalıdır!');
                    return;
                }

                if (!formData.phoneNumber) {
                    showEditModalError("Telefon numarası zorunludur!");
                    return;
                }

                if (!/^0\d{10}$/.test(formData.phoneNumber)) {
                    showEditModalError("Telefon numarası 0 ile başlamalı ve 11 haneli olmalıdır!");
                    $('#external-edit-phoneNumber').addClass('is-invalid');
                    return;
                }

                if (!formData.code || formData.code.length < 2 || formData.code.length > 20) {
                    showEditModalError('Kod 2-20 karakter arasında olmalıdır!');
                    return;
                }

                if (formData.code && !/^[A-Z0-9]+$/.test(formData.code)) {
                    showEditModalError('Kod sadece büyük harf ve rakam içermelidir!');
                    return;
                }

                // Şifre değiştiriliyorsa ekle (opsiyonel)
                const password = $('#external-edit-password').val();
                if (password && password.length > 0) {
                    const confirmPassword = $('#external-edit-confirmPassword').val();
                    if (password !== confirmPassword) {
                        showEditModalError('Şifreler eşleşmiyor!');
                        return;
                    }
                    if (password.length < 6) {
                        showEditModalError('Şifre en az 6 karakter olmalıdır!');
                        return;
                    }
                    formData.password = password;
                }

                try {
                    const submitBtn = $(this).find('button[type="submit"]');
                    const originalText = submitBtn.html();
                    submitBtn.html('<i class="fas fa-spinner fa-spin"></i> Güncelleniyor...').prop('disabled', true);

                    // ID'yi body'de göndereceğiz, route parametresi yok
                    const response = await fetch('/ExternalUser/UpdateUser', {
                        method: 'PUT',
                        headers: {
                            'Content-Type': 'application/json'
                        },
                        body: JSON.stringify(formData)
                    });

                    if (response.ok) {
                        const data = await response.json();
                        if (data.success) {
                            $('#editExternalUserModal').modal('hide');
                            showSuccess('External kullanıcı başarıyla güncellendi!', () => {
                                location.reload();
                            });
                        } else {
                            showEditModalError(data.message || 'Kullanıcı güncellenirken hata oluştu!');
                        }
                    } else {
                        const errorText = await response.text();
                        console.error('Response error:', errorText);
                        showEditModalError('Sunucu hatası: ' + response.status);
                    }

                    submitBtn.html(originalText).prop('disabled', false);
                } catch (error) {
                    console.error('Update user error:', error);
                    showEditModalError('Kullanıcı güncellenirken hata oluştu!');
                    $(this).find('button[type="submit"]').html('<i class="fas fa-save"></i> Güncelle').prop('disabled', false);
                }
            });
        }

        // Modal hata fonksiyonları - Add Modal
        function showModalError(message) {
            const errorAlert = $('#modalValidationError');
            const errorMessage = $('#modalErrorMessage');

            errorMessage.text(message);
            errorAlert.removeClass('d-none');
            errorAlert[0].scrollIntoView({ behavior: 'smooth', block: 'nearest' });
        }

        function hideModalError() {
            $('#modalValidationError').addClass('d-none');
            $('#addExternalUserForm .is-invalid').removeClass('is-invalid');
        }

        // Modal hata fonksiyonları - Edit Modal
        function showEditModalError(message) {
            const errorAlert = $('#editModalValidationError');
            const errorMessage = $('#editModalErrorMessage');

            errorMessage.text(message);
            errorAlert.removeClass('d-none');
            errorAlert[0].scrollIntoView({ behavior: 'smooth', block: 'nearest' });
        }

        function hideEditModalError() {
            $('#editModalValidationError').addClass('d-none');
            $('#editExternalUserForm .is-invalid').removeClass('is-invalid');
        }

        // Silme işlemini gerçekleştir
        async function performDeleteUser(userId, userName) {
            try {
                // DELETE request - body ile ID gönder
                const response = await fetch('/ExternalUser/DeleteUser', {
                    method: 'DELETE',
                    headers: {
                        'Content-Type': 'application/json'
                    },
                    body: JSON.stringify({
                        id: userId,
                        branchId: '' // API token'dan otomatik alacak
                    })
                });

                if (response.ok) {
                    const data = await response.json();
                    if (data.success) {
                        if (typeof Swal !== 'undefined') {
                            Swal.fire('Başarılı!', 'External kullanıcı başarıyla silindi.', 'success').then(() => {
                                location.reload();
                            });
                        } else {
                            showSuccess('External kullanıcı başarıyla silindi!', () => {
                                location.reload();
                            });
                        }
                    } else {
                        showError(data.message || 'External kullanıcı silinirken bir hata oluştu!');
                    }
                } else {
                    showError('Sunucu hatası oluştu!');
                }
            } catch (error) {
                console.error('Delete user error:', error);
                showError('External kullanıcı silinirken bir hata oluştu!');
            }
        }

        // DataTable başlatma
        function initDataTable() {
            try {
                $('#externalUsersTable').DataTable({
                    "language": { "url": "//cdn.datatables.net/plug-ins/1.10.24/i18n/Turkish.json" },
                    "pageLength": 25,
                    "order": [[ 3, "desc" ]],
                    "columnDefs": [{ "orderable": false, "targets": -1 }],
                    "responsive": true,
                    "autoWidth": false
                });
            } catch (error) {
                console.warn('DataTable yüklenemedi:', error);
            }
        }

        // Seçili makine bilgilerini yükle
        async function loadSelectedMachineInfo() {
            try {
                const response = await fetch('/Home/GetSelectedMachine');
                if (response.ok) {
                    const data = await response.json();
                    if (data.success && data.data) {
                        selectedMachineApiAddress = data.data.apiAddress;
                    }
                }
            } catch (error) {
                console.error('Selected machine info yüklenirken hata:', error);
            }
        }

        // Seçili makine kontrolü
        async function checkSelectedMachine() {
            if (!selectedMachineApiAddress) {
                await loadSelectedMachineInfo();
            }
            return selectedMachineApiAddress != null;
        }

        // Password matching setup
        function setupPasswordMatching(passwordId, confirmPasswordId) {
            const passwordField = document.getElementById(passwordId);
            const confirmField = document.getElementById(confirmPasswordId);

            if (!passwordField || !confirmField) return;

            function checkMatch() {
                const password = passwordField.value;
                const confirm = confirmField.value;

                if (confirm === '') {
                    confirmField.classList.remove('is-valid', 'is-invalid');
                    return;
                }

                if (password === confirm && password !== '') {
                    confirmField.classList.remove('is-invalid');
                    confirmField.classList.add('is-valid');
                } else {
                    confirmField.classList.remove('is-valid');
                    confirmField.classList.add('is-invalid');
                }
            }

            passwordField.addEventListener('input', checkMatch);
            confirmField.addEventListener('input', checkMatch);
        }

        // Error ve Success mesajları - SweetAlert için
        function showError(message) {
            if (typeof Swal !== 'undefined') {
                Swal.fire('Hata!', message, 'error');
            } else {
                alert('Hata: ' + message);
            }
        }

        function showSuccess(message, callback = null) {
            if (typeof Swal !== 'undefined') {
                Swal.fire('Başarılı!', message, 'success').then(() => {
                    if (callback) callback();
                });
            } else {
                alert(message);
                if (callback) callback();
            }
        }
    </script>
}