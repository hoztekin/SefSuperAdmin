@{
    ViewData["Title"] = "Şirket Yönetimi";
    var selectedMachine = ViewData["SelectedMachine"] as SelectedMachineInfo;
}

<!-- ViewComponent Navigation -->
@await Component.InvokeAsync("RoleBasedNavigation", new { showLogo = true })

<div class="container-fluid">
    <div class="row mb-4">
        <div class="col-12">
            <div class="d-flex justify-content-between align-items-center">
                <div>
                    <h2><i class="fas fa-building text-primary"></i> Şirket Yönetimi</h2>
                    <p class="text-muted">
                        @if (selectedMachine != null)
                        {
                            <text>@selectedMachine.BranchName makinesindeki şirketleri yönetin</text>
                        }
                        else
                        {
                            <text>Şirket bilgilerini yönetin</text>
                        }
                    </p>
                </div>
                <div>
                    <a href="/Home/Index" class="btn btn-secondary">
                        <i class="fas fa-arrow-left"></i> Ana Sayfaya Dön
                    </a>
                </div>
            </div>
        </div>
    </div>

    <div class="row">
        <div class="col-12">
            <div class="card shadow">
                <div class="card-header bg-success text-white">
                    <div class="d-flex justify-content-between align-items-center">
                        <h6 class="m-0 font-weight-bold">
                            <i class="fas fa-list"></i> Şirket Listesi (<span id="companyCount">0</span> şirket)
                        </h6>
                        <div>
                            <button onclick="showAddCompanyModal()" class="btn btn-sm btn-light me-2">
                                <i class="fas fa-plus"></i> Ekle
                            </button>
                            <button onclick="refreshCompanyList()" class="btn btn-sm btn-outline-light">
                                <i class="fas fa-sync-alt"></i> Yenile
                            </button>
                        </div>
                    </div>
                </div>
                <div class="card-body">
                    <div id="loadingSpinner" class="text-center py-4">
                        <div class="spinner-border text-primary" role="status">
                            <span class="visually-hidden">Yükleniyor...</span>
                        </div>
                        <p class="mt-3 text-muted">Şirketler yükleniyor...</p>
                    </div>

                    <div id="companiesTable" style="display: none;">
                        <div class="table-responsive">
                            <table class="table table-bordered table-hover">
                                <thead class="thead-dark">
                                    <tr>
                                        <th><i class="fas fa-code"></i> Kod</th>
                                        <th><i class="fas fa-building"></i> Şirket Adı</th>
                                        <th><i class="fas fa-receipt"></i> Vergi No</th>
                                        <th><i class="fas fa-envelope"></i> Email</th>
                                        <th><i class="fas fa-phone"></i> Telefon</th>
                                        <th><i class="fas fa-map-marker-alt"></i> Adres</th>
                                        <th><i class="fas fa-cog"></i> İşlemler</th>
                                    </tr>
                                </thead>
                                <tbody id="companiesTableBody">
                                </tbody>
                            </table>
                        </div>
                    </div>

                    <div id="emptyMessage" style="display: none; text-align: center; padding: 60px;">
                        <i class="fas fa-inbox fa-4x text-muted mb-3"></i>
                        <h4 class="text-muted">Şirket Bulunmuyor</h4>
                        <p class="text-muted">Henüz hiç şirket kaydı yapılmamış.</p>
                    </div>
                </div>
            </div>
        </div>
    </div>
</div>

<!-- Şirket Ekleme Modal -->
<div class="modal fade" id="addCompanyModal" tabindex="-1" aria-hidden="true">
    <div class="modal-dialog modal-lg">
        <div class="modal-content">
            <div class="modal-header bg-success text-white">
                <h5 class="modal-title">
                    <i class="fas fa-plus-circle"></i> Yeni Şirket Ekle
                </h5>
                <button type="button" class="btn-close btn-close-white" data-bs-dismiss="modal"></button>
            </div>
            <form id="addCompanyForm">
                <div class="modal-body">
                    <div class="alert alert-danger alert-dismissible fade show d-none" id="addModalError" role="alert">
                        <i class="fas fa-exclamation-circle me-2"></i>
                        <span id="addModalErrorMessage"></span>
                        <button type="button" class="btn-close" data-bs-dismiss="alert"></button>
                    </div>

                    <div class="row">
                        <div class="col-md-6 mb-3">
                            <label class="form-label"><i class="fas fa-code"></i> Kod *</label>
                            <input type="text" class="form-control" id="addCode" name="code" required maxlength="50">
                        </div>
                        <div class="col-md-6 mb-3">
                            <label class="form-label"><i class="fas fa-building"></i> Şirket Adı *</label>
                            <input type="text" class="form-control" id="addName" name="name" required maxlength="255">
                        </div>
                    </div>

                    <div class="row">
                        <div class="col-md-6 mb-3">
                            <label class="form-label"><i class="fas fa-receipt"></i> Vergi Numarası *</label>
                            <input type="text" class="form-control" id="addTaxNumber" name="taxNumber" required maxlength="20">
                        </div>
                        <div class="col-md-6 mb-3">
                            <label class="form-label"><i class="fas fa-envelope"></i> Email</label>
                            <input type="email" class="form-control" id="addEmail" name="email">
                        </div>
                    </div>

                    <div class="row">
                        <div class="col-md-6 mb-3">
                            <label class="form-label"><i class="fas fa-phone"></i> Telefon</label>
                            <input type="tel" class="form-control" id="addPhone" name="phone">
                        </div>
                        <div class="col-md-6 mb-3">
                            <label class="form-label"><i class="fas fa-map"></i> İlçe *</label>
                            <select class="form-select" id="addDistrictId" name="districtId" required>
                                <option value="">Seçiniz...</option>
                            </select>
                        </div>
                    </div>

                    <div class="mb-3">
                        <label class="form-label"><i class="fas fa-map-marker-alt"></i> Adres</label>
                        <textarea class="form-control" id="addAddress" name="address" rows="2" maxlength="500"></textarea>
                    </div>
                </div>
                <div class="modal-footer">
                    <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">İptal</button>
                    <button type="submit" class="btn btn-success">
                        <i class="fas fa-save"></i> Ekle
                    </button>
                </div>
            </form>
        </div>
    </div>
</div>

<!-- Şirket Düzenleme Modal -->
<div class="modal fade" id="editCompanyModal" tabindex="-1" aria-hidden="true">
    <div class="modal-dialog modal-lg">
        <div class="modal-content">
            <div class="modal-header bg-warning text-dark">
                <h5 class="modal-title">
                    <i class="fas fa-edit"></i> Şirket Düzenle
                </h5>
                <button type="button" class="btn-close" data-bs-dismiss="modal"></button>
            </div>
            <form id="editCompanyForm">
                <div class="modal-body">
                    <div class="alert alert-danger alert-dismissible fade show d-none" id="editModalError" role="alert">
                        <i class="fas fa-exclamation-circle me-2"></i>
                        <span id="editModalErrorMessage"></span>
                        <button type="button" class="btn-close" data-bs-dismiss="alert"></button>
                    </div>

                    <input type="hidden" id="editCompanyId">

                    <div class="row">
                        <div class="col-md-6 mb-3">
                            <label class="form-label"><i class="fas fa-code"></i> Kod *</label>
                            <input type="text" class="form-control" id="editCode" name="code" required maxlength="50">
                        </div>
                        <div class="col-md-6 mb-3">
                            <label class="form-label"><i class="fas fa-building"></i> Şirket Adı *</label>
                            <input type="text" class="form-control" id="editName" name="name" required maxlength="255">
                        </div>
                    </div>

                    <div class="row">
                        <div class="col-md-6 mb-3">
                            <label class="form-label"><i class="fas fa-receipt"></i> Vergi Numarası *</label>
                            <input type="text" class="form-control" id="editTaxNumber" name="taxNumber" required maxlength="20">
                        </div>
                        <div class="col-md-6 mb-3">
                            <label class="form-label"><i class="fas fa-envelope"></i> Email</label>
                            <input type="email" class="form-control" id="editEmail" name="email">
                        </div>
                    </div>

                    <div class="row">
                        <div class="col-md-6 mb-3">
                            <label class="form-label"><i class="fas fa-phone"></i> Telefon</label>
                            <input type="tel" class="form-control" id="editPhone" name="phone">
                        </div>
                        <div class="col-md-6 mb-3">
                            <label class="form-label"><i class="fas fa-map"></i> İlçe *</label>
                            <select class="form-select" id="editDistrictId" name="districtId" required>
                                <option value="">Seçiniz...</option>
                            </select>
                        </div>
                    </div>

                    <div class="mb-3">
                        <label class="form-label"><i class="fas fa-map-marker-alt"></i> Adres</label>
                        <textarea class="form-control" id="editAddress" name="address" rows="2" maxlength="500"></textarea>
                    </div>
                </div>
                <div class="modal-footer">
                    <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">İptal</button>
                    <button type="submit" class="btn btn-warning">
                        <i class="fas fa-save"></i> Güncelle
                    </button>
                </div>
            </form>
        </div>
    </div>
</div>

@section Scripts {
    <script>
        const AppState = {
            addModalInstance: null,
            editModalInstance: null,
            selectedMachineApiAddress: null
        };

        document.addEventListener('DOMContentLoaded', function () {
            initializeApp();
        });

        function initializeApp() {
            AppState.addModalInstance = new bootstrap.Modal(document.getElementById('addCompanyModal'));
            AppState.editModalInstance = new bootstrap.Modal(document.getElementById('editCompanyModal'));

            document.getElementById('addCompanyForm').addEventListener('submit', handleAddCompanySubmit);
            document.getElementById('editCompanyForm').addEventListener('submit', handleEditCompanySubmit);

            loadDistricts();
            loadCompanies();
        }

        function loadDistricts() {
            fetch('/Company/GetDistricts')
                .then(response => {
                    if (!response.ok) throw new Error(`HTTP ${response.status}`);
                    return response.json();
                })
                .then(data => {

                    if (data.statusCode === 200 && data.data && data.data.length > 0) {
                        populateDistrictSelects(data.data);
                    } else {
                        console.error('İlçeler yüklenemedi:', data);
                    }
                })
                .catch(error => console.error('District fetch error:', error));
        }


        function populateDistrictSelects(districts) {
            const addSelect = document.getElementById('addDistrictId');
            const editSelect = document.getElementById('editDistrictId');

            districts.forEach(district => {
                const option1 = document.createElement('option');
                option1.value = district.id;
                option1.textContent = district.name;
                addSelect.appendChild(option1);

                const option2 = document.createElement('option');
                option2.value = district.id;
                option2.textContent = district.name;
                editSelect.appendChild(option2);
            });
        }

        function loadCompanies() {
            document.getElementById('loadingSpinner').style.display = 'block';
            document.getElementById('companiesTable').style.display = 'none';
            document.getElementById('emptyMessage').style.display = 'none';

            fetch('/Company/GetList')
                .then(response => {
                    if (!response.ok) throw new Error(`HTTP ${response.status}`);
                    return response.json();
                })
                .then(data => {

                    document.getElementById('loadingSpinner').style.display = 'none';

                    if (data.statusCode === 200 && data.data && data.data.length > 0) {
                        renderCompaniesTable(data.data);
                        document.getElementById('companiesTable').style.display = 'block';
                    } else {
                        document.getElementById('emptyMessage').style.display = 'block';
                    }
                })
                .catch(error => {
                    console.error('Companies fetch error:', error);
                    document.getElementById('loadingSpinner').style.display = 'none';
                    showAlert('error', `Şirketler yüklenemedi: ${error.message}`);
                });
        }

        function renderCompaniesTable(companies) {
            const tbody = document.getElementById('companiesTableBody');
            tbody.innerHTML = '';
            document.getElementById('companyCount').textContent = companies.length;

            companies.forEach(company => {
                const row = document.createElement('tr');
                row.innerHTML = `
                    <td><strong>${escapeHtml(company.code)}</strong></td>
                    <td>${escapeHtml(company.name)}</td>
                    <td>${escapeHtml(company.taxNumber)}</td>
                    <td>${escapeHtml(company.email || '-')}</td>
                    <td>${escapeHtml(company.phone || '-')}</td>
                    <td><small>${escapeHtml(company.address || '-')}</small></td>
                    <td>
                        <div style="gap: 5px; display: flex;">
                            <button class="btn btn-sm btn-primary" onclick="editCompany('${company.id}')">
                                <i class="fas fa-edit"></i> Düzenle
                            </button>
                            <button class="btn btn-sm btn-danger" onclick="deleteCompany('${company.id}', '${escapeHtml(company.name)}')">
                                <i class="fas fa-trash"></i> Sil
                            </button>
                        </div>
                    </td>
                `;
                tbody.appendChild(row);
            });
        }

        async function handleAddCompanySubmit(e) {
            e.preventDefault();
            hideModalError('add');

            const data = {
                code: document.getElementById('addCode').value.trim(),
                name: document.getElementById('addName').value.trim(),
                taxNumber: document.getElementById('addTaxNumber').value.trim(),
                email: document.getElementById('addEmail').value.trim() || null,
                phone: document.getElementById('addPhone').value.trim() || null,
                address: document.getElementById('addAddress').value.trim() || null,
                districtId: document.getElementById('addDistrictId').value,
                isActive: true
            };

            await submitForm('/Company/Create', data, 'POST', 'add');
        }

        async function handleEditCompanySubmit(e) {
            e.preventDefault();
            hideModalError('edit');

            const data = {
                id: document.getElementById('editCompanyId').value,
                code: document.getElementById('editCode').value.trim(),
                name: document.getElementById('editName').value.trim(),
                taxNumber: document.getElementById('editTaxNumber').value.trim(),
                email: document.getElementById('editEmail').value.trim() || null,
                phone: document.getElementById('editPhone').value.trim() || null,
                address: document.getElementById('editAddress').value.trim() || null,
                districtId: document.getElementById('editDistrictId').value,
                isActive: true
            };

            await submitForm('/Company/Update', data, 'PUT', 'edit');
        }

        async function submitForm(endpoint, data, method, modalType) {
            try {
                const response = await fetch(endpoint, {
                    method: method,
                    headers: { 'Content-Type': 'application/json' },
                    body: JSON.stringify(data)
                });

                if (!response.ok) throw new Error(`HTTP ${response.status}`);

                const result = await response.json();


                if (result.statusCode === 200) {
                    const modalInstance = modalType === 'add' ? AppState.addModalInstance : AppState.editModalInstance;
                    modalInstance.hide();

                    setTimeout(() => {
                        showAlert('success', method === 'POST' ? 'Şirket eklendi!' : 'Şirket güncellendi!');
                        loadCompanies();
                    }, 300);
                } else {
                    const errorMsg = result.errorMessage || 'İşlem başarısız!';
                    showModalError(errorMsg, modalType);
                }
            } catch (error) {
                console.error('Form submit error:', error);
                showModalError(`Hata: ${error.message}`, modalType);
            }
        }

        async function editCompany(companyId) {
            try {
                const response = await fetch(`/Company/Get/${companyId}`);
                if (!response.ok) throw new Error(`HTTP ${response.status}`);

                const data = await response.json();

                if (data.statusCode === 200 && data.data) {
                    const company = data.data;

                    // ✅ Form alanlarını doldur
                    document.getElementById('editCompanyId').value = company.id;
                    document.getElementById('editCode').value = company.code;
                    document.getElementById('editName').value = company.name;
                    document.getElementById('editTaxNumber').value = company.taxNumber;
                    document.getElementById('editEmail').value = company.email || '';
                    document.getElementById('editPhone').value = company.phone || '';
                    document.getElementById('editAddress').value = company.address || '';

                    // ✅ İlçe seçimini set et - districtId'yi string'e dönüştür
                    const districtSelect = document.getElementById('editDistrictId');

                    if (company.districtId) {
                        const districtId = String(company.districtId).toLowerCase().trim();

                        // Option'ları kontrol et
                        let found = false;
                        for (let option of districtSelect.options) {
                            if (option.value && String(option.value).toLowerCase().trim() === districtId) {
                                districtSelect.value = option.value;
                                found = true;
                                console.log('İlçe seçildi:', option.text);
                                break;
                            }
                        }

                        if (!found) {
                            console.warn('İlçe bulunamadı - districtId:', company.districtId);
                            districtSelect.value = '';
                        }
                    } else {
                        districtSelect.value = '';
                    }

                    AppState.editModalInstance.show();
                } else {
                    showAlert('error', 'Şirket bilgisi alınamadı');
                }
            } catch (error) {
                console.error('Edit company error:', error);
                showAlert('error', `Hata: ${error.message}`);
            }
        }

        async function deleteCompany(companyId, companyName) {
            const confirmed = await confirmAction('Emin misiniz?', `"${escapeHtml(companyName)}" şirketini silmek istediğinizden emin misiniz?`);

            if (confirmed) {
                try {
                    const response = await fetch('/Company/Delete', {
                        method: 'DELETE',
                        headers: { 'Content-Type': 'application/json' },
                        body: JSON.stringify({ id: companyId })
                    });

                    if (!response.ok) throw new Error(`HTTP ${response.status}`);

                    const result = await response.json();

                    // ✅ statusCode 200 kontrol edin
                    if (result.statusCode === 200) {
                        showAlert('success', 'Şirket silindi!');
                        loadCompanies();
                    } else {
                        showAlert('error', result.errorMessage || 'Silme başarısız!');
                    }
                } catch (error) {
                    console.error('Delete company error:', error);
                    showAlert('error', `Hata: ${error.message}`);
                }
            }
        }

        function showModalError(message, modalType) {
            const errorId = modalType === 'add' ? 'addModalError' : 'editModalError';
            const messageId = modalType === 'add' ? 'addModalErrorMessage' : 'editModalErrorMessage';
            document.getElementById(messageId).textContent = message;
            document.getElementById(errorId).classList.remove('d-none');
        }

        function hideModalError(modalType) {
            const errorId = modalType === 'add' ? 'addModalError' : 'editModalError';
            document.getElementById(errorId).classList.add('d-none');
        }

        function showAddCompanyModal() {
            document.getElementById('addCompanyForm').reset();
            hideModalError('add');
            AppState.addModalInstance.show();
        }

        function refreshCompanyList() {
            location.reload();
        }

        async function showAlert(type, message) {
            return Swal.fire({
                title: type === 'success' ? 'Başarılı!' : 'Hata!',
                text: message,
                icon: type,
                confirmButtonColor: type === 'success' ? '#28a745' : '#dc3545'
            });
        }

        async function confirmAction(title, message) {
            const result = await Swal.fire({
                title: title,
                html: message,
                icon: 'warning',
                showCancelButton: true,
                confirmButtonColor: '#28a745',
                cancelButtonColor: '#6c757d',
                confirmButtonText: '<i class="fas fa-check"></i> Evet',
                cancelButtonText: '<i class="fas fa-times"></i> Hayır'
            });
            return result.isConfirmed;
        }

        function escapeHtml(text) {
            if (!text) return '';
            const map = { '&': '&amp;', '<': '&lt;', '>': '&gt;', '"': '&quot;', "'": '&#039;' };
            return text.replace(/[&<>"']/g, m => map[m]);
        }

        window.editCompany = editCompany;
        window.deleteCompany = deleteCompany;
        window.showAddCompanyModal = showAddCompanyModal;
        window.refreshCompanyList = refreshCompanyList;
    </script>
}