services:
  app-api:
    build: { context: ., dockerfile: App.Api/Dockerfile }
    image: local/appapi:latest
    environment:
      - ASPNETCORE_ENVIRONMENT=Production
      - ASPNETCORE_HTTP_PORTS=8080
      - ASPNETCORE_HTTPS_PORTS=8081
      - ConnectionStrings__SqlServer=Server=sql-server;Database=${SQL_SERVER_DB};User Id=${SQL_SERVER_USER};Password=${SQL_SERVER_PASSWORD};TrustServerCertificate=True;
    ports: ["5190:8080","7190:8081"]
    depends_on:
      sql-server: { condition: service_healthy }
      app-redis:   { condition: service_healthy }
      rabbitmq:    { condition: service_started }
      seq:         { condition: service_started }
    healthcheck:
      test: ["CMD-SHELL","bash -lc '</dev/tcp/localhost/8080'"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
    networks: [app-network]

  app-ui:
    build: { context: ., dockerfile: App.UI/Dockerfile }
    image: local/appui:latest
    environment:
      - ASPNETCORE_ENVIRONMENT=Production
      - ASPNETCORE_HTTP_PORTS=8080
      - ASPNETCORE_HTTPS_PORTS=8081
      - DOTNET_RUNNING_IN_CONTAINER=true
      - API_BASE_URL=http://app-api:8080/
      - CacheSettings__ConnectionString=app-redis:6379,password=${REDIS_PASSWORD}
    ports: ["5191:8080","7191:8081"]
    depends_on:
      app-api: { condition: service_healthy }
    healthcheck:
      test: ["CMD-SHELL","bash -lc '</dev/tcp/localhost/8080'"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
    networks: [app-network]

  cloudflared:
    image: cloudflare/cloudflared:latest
    command: tunnel --config /etc/cloudflared/config.yaml run
    environment: [ "TUNNEL_TOKEN=${CLOUD_TUNNEL_TOKEN}" ]
    volumes: [ ./.cloudflared/config.yaml:/etc/cloudflared/config.yaml:ro ]
    depends_on: { app-ui: { condition: service_healthy } }
    networks: [app-network]
