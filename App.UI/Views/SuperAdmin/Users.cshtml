@model List<UserAppDtoUI>

@{
    ViewData["Title"] = "Kullanıcı Yönetimi";
    Layout = "_Layout";
}

<!-- ViewComponent Navigation -->
@await Component.InvokeAsync("RoleBasedNavigation", new { showLogo = true })

<div class="container-fluid">
    <div class="row mb-4">
        <div class="col-12">
            <div class="d-flex justify-content-between align-items-center">
                <div>
                    <h2><i class="fas fa-users"></i> Kullanıcı Yönetimi</h2>
                    <p class="text-muted">Sistemdeki tüm kullanıcıları yönetin ve rol atayın</p>
                </div>
                <div>
                    <a asp-action="Index" class="btn btn-secondary">
                        <i class="fas fa-arrow-left"></i> Dashboard'a Dön
                    </a>
                </div>
            </div>
        </div>
    </div>

    <div class="row">
        <div class="col-12">
            <div class="card shadow">
                <div class="card-header bg-primary text-white">
                    <div class="d-flex justify-content-between align-items-center">
                        <h6 class="m-0 font-weight-bold">
                            <i class="fas fa-list"></i> Kullanıcı Listesi (@Model.Count kullanıcı)
                        </h6>
                        <div>
                            <button onclick="showAddUserModal()" class="btn btn-sm btn-success me-2">
                                <i class="fas fa-plus"></i> Ekle
                            </button>
                            <button onclick="refreshUserList()" class="btn btn-sm btn-light">
                                <i class="fas fa-sync-alt"></i> Yenile
                            </button>
                        </div>
                    </div>
                </div>
                <div class="card-body">
                    @if (Model.Any())
                    {
                        <div class="table-responsive">
                            <table class="table table-bordered table-hover" id="usersTable">
                                <thead class="thead-dark">
                                    <tr>
                                        <th><i class="fas fa-user"></i> Kullanıcı Adı</th>
                                        <th><i class="fas fa-envelope"></i> Email</th>
                                        <th><i class="fas fa-user-tag"></i> Roller</th>
                                        <th><i class="fas fa-calendar"></i> Kayıt Tarihi</th>
                                        <th><i class="fas fa-check-circle"></i> Email Onayı</th>
                                        <th><i class="fas fa-cog"></i> İşlemler</th>
                                    </tr>
                                </thead>
                                <tbody>
                                    @foreach (var user in Model)
                                    {
                                        <tr>
                                            <td class="align-middle">
                                                <strong>@user.UserName</strong>
                                                <br><small class="text-muted">ID: @user.Id.Substring(0, 8)...</small>
                                            </td>
                                            <td class="align-middle">@user.EMail</td>
                                            <td class="align-middle">
                                                @if (user.Roles != null && user.Roles.Any())
                                                {
                                                    @foreach (var role in user.Roles)
                                                    {
                                                        @if (role == "SuperAdmin")
                                                        {
                                                            <span class="badge bg-warning text-dark me-1">
                                                                <i class="fas fa-crown"></i> @role
                                                            </span>
                                                        }
                                                        else if (role == "Admin")
                                                        {
                                                            <span class="badge bg-primary me-1">
                                                                <i class="fas fa-user-shield"></i> @role
                                                            </span>
                                                        }
                                                        else if (role == "Destek")
                                                        {
                                                            <span class="badge bg-info me-1">
                                                                <i class="fas fa-headset"></i> @role
                                                            </span>
                                                        }
                                                        else
                                                        {
                                                            <span class="badge bg-secondary me-1">
                                                                <i class="fas fa-user"></i> @role
                                                            </span>
                                                        }
                                                    }
                                                }
                                                else
                                                {
                                                    <span class="text-muted">Rol atanmamış</span>
                                                }
                                            </td>
                                            <td class="align-middle">
                                                @if (user.CreatedDate.HasValue)
                                                {
                                                    @user.CreatedDate.Value.ToString("dd.MM.yyyy HH:mm")
                                                }
                                                else
                                                {
                                                    <span class="text-muted">-</span>
                                                }
                                            </td>
                                            <td class="align-middle text-center">
                                                @if (user.EmailConfirmed)
                                                {
                                                    <span class="badge bg-success">
                                                        <i class="fas fa-check"></i> Onaylı
                                                    </span>
                                                }
                                                else
                                                {
                                                    <span class="badge bg-warning text-dark">
                                                        <i class="fas fa-clock"></i> Bekliyor
                                                    </span>
                                                }
                                            </td>
                                            <td class="align-middle">
                                                <div class="btn-group" role="group">
                                                    <a asp-action="AssignRoles" asp-route-userId="@user.Id"
                                                       class="btn btn-sm btn-primary" title="Rol Ata">
                                                        <i class="fas fa-user-tag"></i>
                                                    </a>
                                                    <button onclick="viewUserDetails('@user.Id')"
                                                            class="btn btn-sm btn-info" title="Detaylar">
                                                        <i class="fas fa-eye"></i>
                                                    </button>
                                                    <button onclick="showEditUserModal('@user.Id', '@user.UserName', '@user.EMail')"
                                                            class="btn btn-sm btn-warning" title="Düzenle">
                                                        <i class="fas fa-edit"></i>
                                                    </button>
                                                    <button onclick="deleteUser('@user.Id', '@user.UserName')"
                                                            class="btn btn-sm btn-danger" title="Sil">
                                                        <i class="fas fa-trash"></i>
                                                    </button>
                                                </div>
                                            </td>
                                        </tr>
                                    }
                                </tbody>
                            </table>
                        </div>
                    }
                    else
                    {
                        <div class="text-center p-5">
                            <i class="fas fa-users fa-3x text-muted mb-3"></i>
                            <h5 class="text-muted">Kullanıcı Bulunamadı</h5>
                            <p class="text-muted">Henüz sisteme kullanıcı eklenmemiş.</p>
                            <button onclick="showAddUserModal()" class="btn btn-primary">
                                <i class="fas fa-plus"></i> İlk Kullanıcıyı Ekle
                            </button>
                        </div>
                    }
                </div>
            </div>
        </div>
    </div>
</div>

<!-- Kullanıcı Ekleme Modal -->
<div class="modal fade" id="addUserModal" tabindex="-1" aria-hidden="true">
    <div class="modal-dialog modal-lg">
        <div class="modal-content">
            <div class="modal-header bg-primary text-white">
                <h5 class="modal-title">
                    <i class="fas fa-user-plus"></i> Yeni Kullanıcı Ekle
                </h5>
                <button type="button" class="btn-close btn-close-white" data-bs-dismiss="modal"></button>
            </div>
            <form id="addUserForm">
                <div class="modal-body">
                    <div class="alert alert-info">
                        <i class="fas fa-info-circle"></i>
                        Tüm alanlar zorunludur. Güçlü bir şifre seçiniz.
                    </div>

                    <div class="mb-3">
                        <label for="admin-userName" class="form-label">
                            <i class="fas fa-user"></i> Kullanıcı Adı *
                        </label>
                        <input type="text" class="form-control form-control-lg" id="admin-userName" name="userName" required autocomplete="off">
                        <div class="invalid-feedback"></div>
                    </div>

                    <div class="mb-3">
                        <label for="admin-email" class="form-label">
                            <i class="fas fa-envelope"></i> Email *
                        </label>
                        <input type="email" class="form-control form-control-lg" id="admin-email" name="email" required autocomplete="off">
                        <div class="invalid-feedback"></div>
                    </div>

                    <div class="mb-3">
                        <label for="admin-password" class="form-label">
                            <i class="fas fa-lock"></i> Şifre *
                        </label>
                        <div class="input-group">
                            <input type="password" class="form-control form-control-lg" id="admin-password" name="password" required autocomplete="new-password">
                            <button class="btn btn-outline-secondary" type="button" onclick="togglePassword('admin-password', this)">
                                <i class="fas fa-eye"></i>
                            </button>
                        </div>
                        <div class="invalid-feedback"></div>
                        <div class="form-text">En az 4 karakter olmalıdır.</div>
                    </div>

                    <div class="mb-3">
                        <label for="admin-confirmPassword" class="form-label">
                            <i class="fas fa-lock"></i> Şifre Tekrar *
                        </label>
                        <div class="input-group">
                            <input type="password" class="form-control form-control-lg" id="admin-confirmPassword" name="confirmPassword" required autocomplete="new-password">
                            <button class="btn btn-outline-secondary" type="button" onclick="togglePassword('admin-confirmPassword', this)">
                                <i class="fas fa-eye"></i>
                            </button>
                        </div>
                        <div class="invalid-feedback"></div>
                        <div class="valid-feedback">Şifreler eşleşiyor!</div>
                    </div>
                </div>

                <div class="modal-footer">
                    <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">
                        <i class="fas fa-times"></i> İptal
                    </button>
                    <button type="submit" class="btn btn-primary">
                        <i class="fas fa-save"></i> Kullanıcı Ekle
                    </button>
                </div>
            </form>
        </div>
    </div>
</div>

<!-- KULLANICI DÜZENLEME MODALI -->
<div class="modal fade" id="editUserModal" tabindex="-1" aria-hidden="true">
    <div class="modal-dialog modal-lg">
        <div class="modal-content">
            <div class="modal-header bg-warning text-dark">
                <h5 class="modal-title">
                    <i class="fas fa-user-edit"></i> Kullanıcı Düzenle
                </h5>
                <button type="button" class="btn-close" data-bs-dismiss="modal"></button>
            </div>
            <form id="editUserForm">
                <div class="modal-body">
                    <div class="alert alert-warning">
                        <i class="fas fa-exclamation-triangle"></i>
                        Kullanıcı bilgilerini dikkatli bir şekilde düzenleyin.
                    </div>

                    <input type="hidden" id="edit-userId" name="userId">

                     <div class="alert alert-warning">
                        <i class="fas fa-exclamation-triangle"></i>
                        Şifreyi değiştirmek istemiyorsanız boş bırakın.
                    </div>

                    <div class="mb-3">
                        <label for="edit-userName" class="form-label">
                            <i class="fas fa-user"></i> Kullanıcı Adı *
                        </label>
                        <input type="text" class="form-control form-control-lg" id="edit-userName" name="userName" required>
                        <div class="invalid-feedback"></div>
                    </div>

                    <div class="mb-3">
                        <label for="edit-email" class="form-label">
                            <i class="fas fa-envelope"></i> Email *
                        </label>
                        <input type="email" class="form-control form-control-lg" id="edit-email" name="email" required>
                        <div class="invalid-feedback"></div>
                    </div>

                    <div class="mb-3">
                        <label for="edit-password" class="form-label">
                            <i class="fas fa-lock"></i> Yeni Şifre (Opsiyonel)
                        </label>
                        <div class="input-group">
                            <input type="password" class="form-control form-control-lg" id="edit-password" name="password" autocomplete="new-password">
                            <button class="btn btn-outline-secondary" type="button" onclick="togglePassword('edit-password', this)">
                                <i class="fas fa-eye"></i>
                            </button>
                        </div>
                        <div class="invalid-feedback"></div>
                    </div>

                    <div class="mb-3">
                        <label for="edit-confirmPassword" class="form-label">
                            <i class="fas fa-lock"></i> Yeni Şifre Tekrar
                        </label>
                        <div class="input-group">
                            <input type="password" class="form-control form-control-lg" id="edit-confirmPassword" name="confirmPassword" autocomplete="new-password">
                            <button class="btn btn-outline-secondary" type="button" onclick="togglePassword('edit-confirmPassword', this)">
                                <i class="fas fa-eye"></i>
                            </button>
                        </div>
                        <div class="invalid-feedback"></div>
                        <div class="valid-feedback">Şifreler eşleşiyor!</div>
                    </div>
                </div>

                <div class="modal-footer">
                    <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">
                        <i class="fas fa-times"></i> İptal
                    </button>
                    <button type="submit" class="btn btn-warning">
                        <i class="fas fa-save"></i> Güncelle
                    </button>
                </div>
            </form>
        </div>
    </div>
</div>

<!-- Kullanıcı Detay Modal -->
<div class="modal fade" id="userDetailModal" tabindex="-1">
    <div class="modal-dialog modal-lg">
        <div class="modal-content">
            <div class="modal-header bg-info text-white">
                <h5 class="modal-title"><i class="fas fa-user-tag"></i> Kullanıcı Detayları</h5>
                <button type="button" class="btn-close btn-close-white" data-bs-dismiss="modal"></button>
            </div>
            <div class="modal-body">
                <div id="userDetailContent">
                    <div class="text-center">
                        <i class="fas fa-spinner fa-spin fa-2x"></i>
                        <p>Yükleniyor...</p>
                    </div>
                </div>
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Kapat</button>
            </div>
        </div>
    </div>
</div>

@section Scripts{

    <script>
        $(document).ready(function() {
            // DataTables sadece tablo varsa yükle
            if ($('#usersTable').length > 0) {
                // DataTables CSS ve JS'i dinamik yükle
                if (!$.fn.DataTable) {
                    $('head').append('<link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/datatables/1.10.24/css/dataTables.bootstrap5.min.css">');
                    $.getScript('https://cdnjs.cloudflare.com/ajax/libs/datatables/1.10.24/js/jquery.dataTables.min.js', function() {
                        $.getScript('https://cdnjs.cloudflare.com/ajax/libs/datatables/1.10.24/js/dataTables.bootstrap5.min.js', function() {
                            initDataTable();
                        });
                    });
                } else {
                    initDataTable();
                }
            }

            // Modal açıldığında setup yap - GÜNCELLENMİŞ ID'LERLE
            $('#addUserModal').on('shown.bs.modal', function () {
                setTimeout(() => {
                    setupPasswordMatching('admin-password', 'admin-confirmPassword');
                }, 50);
                $('#admin-userName').focus();
                // Formu temizle
                $('#addUserForm')[0].reset();
                $('#addUserForm .is-invalid, #addUserForm .is-valid').removeClass('is-invalid is-valid');
            });

            $('#editUserModal').on('shown.bs.modal', function () {
                setTimeout(() => {
                    setupPasswordMatching('edit-password', 'edit-confirmPassword');
                }, 50);
                $('#edit-userName').focus();
                // Form validation'ları temizle
                $('#editUserForm .is-invalid, #editUserForm .is-valid').removeClass('is-invalid is-valid');
            });

            // KULLANICI EKLEME FORM SUBMIT - GÜNCELLENMİŞ ID'LERLE
            $('#addUserForm').on('submit', async function(e) {
                e.preventDefault();

                // Küçük bir gecikme ekle - browser'ın autocomplete'i tamamlaması için
                await new Promise(resolve => setTimeout(resolve, 100));

                // Form verilerini al - GÜNCELLENMİŞ ID'LERLE
                const userName = $('#admin-userName').val();
                const email = $('#admin-email').val();
                const password = $('#admin-password').val();
                const confirmPassword = $('#admin-confirmPassword').val();

                console.log('Form Data:', { userName, email, password: password ? '***' : '', confirmPassword: confirmPassword ? '***' : '' });

                // Tüm validation'ları temizle
                $('#addUserForm .is-invalid, #addUserForm .is-valid').removeClass('is-invalid is-valid');

                // Validasyon
                let hasError = false;

                if (!userName || userName.trim() === '') {
                    showFieldError('admin-userName', 'Kullanıcı adı gerekli!');
                    hasError = true;
                }

                if (!email || email.trim() === '') {
                    showFieldError('admin-email', 'Email gerekli!');
                    hasError = true;
                }

                if (!password || password.length === 0) {
                    showFieldError('admin-password', 'Şifre gerekli!');
                    hasError = true;
                } else if (password.length < 4) {  // Validator'a göre minimum 4
                    showFieldError('admin-password', 'Şifre en az 4 karakter olmalıdır!');
                    hasError = true;
                }

                if (!confirmPassword || confirmPassword.length === 0) {
                    showFieldError('admin-confirmPassword', 'Şifre tekrar gerekli!');
                    hasError = true;
                }

                // Şifre eşleştirme kontrolü
                if (password && confirmPassword && password !== confirmPassword) {
                    showFieldError('admin-confirmPassword', 'Şifreler eşleşmiyor!');
                    if (typeof Swal !== 'undefined') {
                        Swal.fire({
                            title: 'Validasyon Hatası!',
                            text: 'Şifreler eşleşmiyor!',
                            icon: 'warning',
                            confirmButtonColor: '#ffc107'
                        });
                    }
                    hasError = true;
                }

                if (hasError) {
                    return;
                }

                const submitData = {
                    UserName: userName.trim(),
                    EMail: email.trim(),
                    Password: password,
                    ConfirmPassword: confirmPassword
                };

                try {
                    const submitBtn = $(this).find('button[type="submit"]');
                    const originalText = submitBtn.html();
                    submitBtn.html('<i class="fas fa-spinner fa-spin"></i> Kaydediliyor...').prop('disabled', true);

                    // CSRF token al
                    let token = $('input[name="__RequestVerificationToken"]').val();
                    if (!token) {
                        token = $('meta[name="RequestVerificationToken"]').attr('content');
                    }

                    const response = await fetch('/SuperAdmin/CreateUser', {
                        method: 'POST',
                        headers: {
                            'Content-Type': 'application/json',
                            'RequestVerificationToken': token || ''
                        },
                        body: JSON.stringify(submitData)
                    });

                    if (response.ok) {
                        const data = await response.json();

                        if (data.success) {
                            $('#addUserModal').modal('hide');
                            if (typeof Swal !== 'undefined') {
                                Swal.fire({
                                    title: 'Başarılı!',
                                    text: 'Kullanıcı başarıyla eklendi!',
                                    icon: 'success',
                                    confirmButtonColor: '#28a745'
                                }).then(() => {
                                    location.reload();
                                });
                            } else {
                                alert('Kullanıcı başarıyla eklendi!');
                                location.reload();
                            }
                        } else {
                            if (typeof Swal !== 'undefined') {
                                Swal.fire({
                                    title: 'Hata!',
                                    text: data.message || 'Kullanıcı eklenirken bir hata oluştu!',
                                    icon: 'error',
                                    confirmButtonColor: '#dc3545'
                                });
                            } else {
                                alert('Hata: ' + (data.message || 'Kullanıcı eklenirken bir hata oluştu!'));
                            }
                        }
                    } else {
                        if (typeof Swal !== 'undefined') {
                            Swal.fire({
                                title: 'Hata!',
                                text: 'Sunucu hatası oluştu!',
                                icon: 'error',
                                confirmButtonColor: '#dc3545'
                            });
                        } else {
                            alert('Sunucu hatası oluştu!');
                        }
                    }

                    submitBtn.html(originalText).prop('disabled', false);
                } catch (error) {
                    console.error('Error:', error);
                    if (typeof Swal !== 'undefined') {
                        Swal.fire({
                            title: 'Hata!',
                            text: 'Beklenmeyen bir hata oluştu!',
                            icon: 'error',
                            confirmButtonColor: '#dc3545'
                        });
                    } else {
                        alert('Beklenmeyen bir hata oluştu!');
                    }
                    const submitBtn = $(this).find('button[type="submit"]');
                    const originalText = '<i class="fas fa-save"></i> Kullanıcı Ekle';
                    submitBtn.html(originalText).prop('disabled', false);
                }
            });

            // KULLANICI DÜZENLEME FORM SUBMIT - TAMAMEN DÜZELTİLMİŞ
            $('#editUserForm').on('submit', async function(e) {
                e.preventDefault();

                // DÜZELTİLMİŞ: Doğru ID'leri kullan
                const userId = $('#edit-userId').val();
                const userName = $('#edit-userName').val();
                const email = $('#edit-email').val();
                const password = $('#edit-password').val();
                const confirmPassword = $('#edit-confirmPassword').val();

                console.log('Edit Form Data:', { userId, userName, email, password: password ? '***' : '', confirmPassword: confirmPassword ? '***' : '' });

                // Tüm validation'ları temizle
                $('#editUserForm .is-invalid, #editUserForm .is-valid').removeClass('is-invalid is-valid');

                // Validasyon
                let hasError = false;

                if (!userId) {
                    alert('Kullanıcı ID bulunamadı!');
                    return;
                }

                if (!userName || userName.trim() === '') {
                    showFieldError('edit-userName', 'Kullanıcı adı gerekli!');
                    hasError = true;
                }

                if (!email || email.trim() === '') {
                    showFieldError('edit-email', 'Email gerekli!');
                    hasError = true;
                }

                // Şifre kontrolü (opsiyonel)
                if (password && password.length > 0) {
                    if (password.length < 4) {
                        showFieldError('edit-password', 'Şifre en az 4 karakter olmalıdır!');
                        hasError = true;
                    }

                    if (!confirmPassword || confirmPassword.length === 0) {
                        showFieldError('edit-confirmPassword', 'Şifre tekrar gerekli!');
                        hasError = true;
                    } else if (password !== confirmPassword) {
                        showFieldError('edit-confirmPassword', 'Şifreler eşleşmiyor!');
                        hasError = true;
                    }
                }

                if (hasError) {
                    return;
                }

                const submitData = {
                    Id: userId,
                    UserName: userName.trim(),
                    EMail: email.trim()
                };

                // Şifre varsa ekle
                if (password && password.length > 0) {
                    submitData.Password = password;
                    submitData.ConfirmPassword = confirmPassword;
                }

                try {
                    const submitBtn = $(this).find('button[type="submit"]');
                    const originalText = submitBtn.html();
                    submitBtn.html('<i class="fas fa-spinner fa-spin"></i> Güncelleniyor...').prop('disabled', true);

                    // CSRF token al
                    let token = $('input[name="__RequestVerificationToken"]').val();
                    if (!token) {
                        token = $('meta[name="RequestVerificationToken"]').attr('content');
                    }

        
                    const response = await fetch(`/SuperAdmin/UpdateUser?userId=${userId}`, {
                        method: 'PUT',
                        headers: {
                            'Content-Type': 'application/json',
                            'RequestVerificationToken': token || ''
                        },
                        body: JSON.stringify(submitData)
                    });

                    console.log('Response status:', response.status);

                    if (response.ok) {
                        const data = await response.json();
                        console.log('Response data:', data);

                        if (data.success) {
                            $('#editUserModal').modal('hide');
                            if (typeof Swal !== 'undefined') {
                                Swal.fire({
                                    title: 'Başarılı!',
                                    text: 'Kullanıcı başarıyla güncellendi!',
                                    icon: 'success',
                                    confirmButtonColor: '#28a745'
                                }).then(() => {
                                    location.reload();
                                });
                            } else {
                                alert('Kullanıcı başarıyla güncellendi!');
                                location.reload();
                            }
                        } else {
                            if (typeof Swal !== 'undefined') {
                                Swal.fire({
                                    title: 'Hata!',
                                    text: data.message || 'Kullanıcı güncellenirken bir hata oluştu!',
                                    icon: 'error',
                                    confirmButtonColor: '#dc3545'
                                });
                            } else {
                                alert('Hata: ' + (data.message || 'Kullanıcı güncellenirken bir hata oluştu!'));
                            }
                        }
                    } else {
                        const errorText = await response.text();
                        console.error('Server error:', errorText);

                        if (typeof Swal !== 'undefined') {
                            Swal.fire({
                                title: 'Sunucu Hatası!',
                                text: `HTTP ${response.status}: ${errorText || 'Bilinmeyen hata'}`,
                                icon: 'error',
                                confirmButtonColor: '#dc3545'
                            });
                        } else {
                            alert(`Sunucu hatası: HTTP ${response.status}`);
                        }
                    }

                    submitBtn.html(originalText).prop('disabled', false);
                } catch (error) {
                    console.error('Network Error:', error);
                    if (typeof Swal !== 'undefined') {
                        Swal.fire({
                            title: 'Ağ Hatası!',
                            text: 'Sunucuya bağlanılamadı: ' + error.message,
                            icon: 'error',
                            confirmButtonColor: '#dc3545'
                        });
                    } else {
                        alert('Ağ hatası: ' + error.message);
                    }
                    const submitBtn = $(this).find('button[type="submit"]');
                    const originalText = '<i class="fas fa-save"></i> Güncelle';
                    submitBtn.html(originalText).prop('disabled', false);
                }
            });
        });

        // DataTables başlatma fonksiyonu
        function initDataTable() {
            $('#usersTable').DataTable({
                "language": {
                    "url": "//cdn.datatables.net/plug-ins/1.10.24/i18n/Turkish.json"
                },
                "pageLength": 25,
                "order": [[ 3, "desc" ]],
                "columnDefs": [
                    { "orderable": false, "targets": 5 }
                ],
                "responsive": true,
                "autoWidth": false
            });
        }

        // Kullanıcı listesini yenile
        function refreshUserList() {
            location.reload();
        }

        // Kullanıcı ekleme modalını göster
        function showAddUserModal() {
            $('#addUserModal').modal('show');
        }

        // Kullanıcı düzenleme modalını göster - DÜZELTİLMİŞ ID'LERLE
        function showEditUserModal(userId, userName, email) {
            $('#editUserModal').modal('show');

            // Formu temizle
            $('#editUserForm')[0].reset();
            $('#editUserForm .is-invalid, #editUserForm .is-valid').removeClass('is-invalid is-valid');

            // Değerleri doldur - DÜZELTİLMİŞ ID'LERLE
            $('#edit-userId').val(userId);
            $('#edit-userName').val(userName);
            $('#edit-email').val(email);

            console.log('Modal opened with data:', { userId, userName, email });
        }

        // Global scope'a editUser fonksiyonunu ekle (eski kod uyumluluğu için)
        window.editUser = showEditUserModal;

        // Field hata gösterme fonksiyonu - SuperAdmin için
        function showFieldError(fieldId, message) {
            const field = $('#' + fieldId);
            field.addClass('is-invalid');
            field.removeClass('is-valid');

            let feedbackElement;
            if (field.parent().hasClass('input-group')) {
                feedbackElement = field.parent().parent().find('.invalid-feedback');
            } else {
                feedbackElement = field.siblings('.invalid-feedback');
            }

            if (feedbackElement.length === 0) {
                // Eğer invalid-feedback elementi yoksa oluştur
                if (field.parent().hasClass('input-group')) {
                    field.parent().after('<div class="invalid-feedback">' + message + '</div>');
                } else {
                    field.after('<div class="invalid-feedback">' + message + '</div>');
                }
            } else {
                feedbackElement.text(message);
            }
        }

        // Şifre görünürlük toggle - DÜZELTİLMİŞ FUNCTION
        window.togglePassword = function(fieldId, button) {
            const field = document.getElementById(fieldId);

            if (!field) {
                console.warn('Password field not found:', fieldId);
                return;
            }

            const icon = button.querySelector('i');

            if (!icon) {
                console.warn('Icon not found in button');
                return;
            }

            if (field.type === 'password') {
                field.type = 'text';
                icon.classList.remove('fa-eye');
                icon.classList.add('fa-eye-slash');
            } else {
                field.type = 'password';
                icon.classList.remove('fa-eye-slash');
                icon.classList.add('fa-eye');
            }
        }

        // Real-time şifre eşleştirme kontrolü - DÜZELTİLMİŞ FUNCTION
        function setupPasswordMatching(passwordId, confirmPasswordId) {
            const passwordField = document.getElementById(passwordId);
            const confirmField = document.getElementById(confirmPasswordId);

            if (!passwordField || !confirmField) {
                console.warn('Password fields not found:', passwordId, confirmPasswordId);
                return;
            }

            function checkMatch() {
                const password = passwordField.value;
                const confirm = confirmField.value;

                if (confirm === '') {
                    confirmField.classList.remove('is-valid', 'is-invalid');
                    return;
                }

                if (password === confirm && password !== '') {
                    confirmField.classList.remove('is-invalid');
                    confirmField.classList.add('is-valid');
                } else {
                    confirmField.classList.remove('is-valid');
                    confirmField.classList.add('is-invalid');
                    const feedbackElement = confirmField.parentElement.parentElement.querySelector('.invalid-feedback');
                    if (feedbackElement) {
                        feedbackElement.textContent = 'Şifreler eşleşmiyor!';
                    }
                }
            }

            passwordField.addEventListener('input', checkMatch);
            confirmField.addEventListener('input', checkMatch);
        }

        // Kullanıcı silme fonksiyonu - DÜZELTİLMİŞ
        function deleteUser(userId, userName) {
            if (typeof Swal !== 'undefined') {
                Swal.fire({
                    title: 'Emin misiniz?',
                    text: `"${userName}" kullanıcısını silmek istediğinizden emin misiniz?`,
                    icon: 'warning',
                    showCancelButton: true,
                    confirmButtonColor: '#dc3545',
                    cancelButtonColor: '#6c757d',
                    confirmButtonText: 'Evet, Sil!',
                    cancelButtonText: 'İptal'
                }).then(async (result) => {
                    if (result.isConfirmed) {
                        try {
                            // CSRF token al
                            let token = $('input[name="__RequestVerificationToken"]').val();
                            if (!token) {
                                token = $('meta[name="RequestVerificationToken"]').attr('content');
                            }

                            const response = await fetch(`/SuperAdmin/DeleteUser?userId=${userId}`, {
                                method: 'DELETE',
                                headers: {
                                    'Content-Type': 'application/json',
                                    'RequestVerificationToken': token || ''
                                }
                            });

                            if (response.ok) {
                                const data = await response.json();

                                if (data.success) {
                                    Swal.fire({
                                        title: 'Silindi!',
                                        text: 'Kullanıcı başarıyla silindi.',
                                        icon: 'success',
                                        confirmButtonColor: '#28a745'
                                    }).then(() => {
                                        location.reload();
                                    });
                                } else {
                                    Swal.fire({
                                        title: 'Hata!',
                                        text: data.message || 'Kullanıcı silinirken bir hata oluştu!',
                                        icon: 'error',
                                        confirmButtonColor: '#dc3545'
                                    });
                                }
                            } else {
                                Swal.fire({
                                    title: 'Hata!',
                                    text: 'Sunucu hatası oluştu!',
                                    icon: 'error',
                                    confirmButtonColor: '#dc3545'
                                });
                            }
                        } catch (error) {
                            console.error('Error:', error);
                            Swal.fire({
                                title: 'Hata!',
                                text: 'Beklenmeyen bir hata oluştu!',
                                icon: 'error',
                                confirmButtonColor: '#dc3545'
                            });
                        }
                    }
                });
            } else {
                if (confirm(`"${userName}" kullanıcısını silmek istediğinizden emin misiniz?`)) {
                    // Basit silme işlemi
                    window.location.href = `/SuperAdmin/DeleteUser/${userId}`;
                }
            }
        }
    </script>
}